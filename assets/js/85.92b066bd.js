(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{285:function(_,v,t){"use strict";t.r(v);var e=t(0),r=Object(e.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"其他问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他问题"}},[_._v("#")]),_._v(" 其他问题")]),_._v(" "),t("h2",{attrs:{id:"存储引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎"}},[_._v("#")]),_._v(" 存储引擎")]),_._v(" "),t("p",[t("strong",[_._v("1、Memory")])]),_._v(" "),t("p",[_._v("  如果表使用的是Memory存储引擎，那么这是一张内存表，当MySQL重启的时候数据都会丢失。优势是数据保存在内存中，读写速度快。内存表不支持行锁，只支持表锁。")]),_._v(" "),t("p",[_._v("  建议所有表使用InnoDB引擎，唯一一个例外的场景是"),t("strong",[_._v("使用Memory存储引擎做临时表，性能最好")]),_._v("。")]),_._v(" "),t("p",[t("strong",[_._v("2、InnoDB")])]),_._v(" "),t("p",[_._v("  InnoDB是MySQL5.5.5版本之后默认的存储引擎，是目前最常用的存储引擎。InnoDB存储引擎"),t("strong",[_._v("支持行锁")]),_._v("，能够支撑高并发，支持事务。数据存储于聚簇索引，有成熟的数据库结构，分库分表，读写分离，主备切换，都是基于InnoDB存储引擎而来的。")]),_._v(" "),t("p",[t("strong",[_._v("3、MyISAM")])]),_._v(" "),t("p",[_._v("  MyISAM不支持事务，表级锁。但索引文件和数据文件分开，因为内存里可以缓存更多的索引，对查询的性能更好，适用于少量插入，大量查询的需求。适合用于报表系统。")]),_._v(" "),t("h2",{attrs:{id:"临时表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#临时表"}},[_._v("#")]),_._v(" 临时表")]),_._v(" "),t("p",[_._v("  临时表也是有存储引擎的。如果使用InnoDB存储引擎或者MyISAM存储引擎，那么数据是写到磁盘上的，称为"),t("strong",[_._v("磁盘临时表")]),_._v("。如果使用Memory存储引擎，那么数据是存储在内存中的，称为"),t("strong",[_._v("内存临时表")]),_._v("。临时表最常用的还是内存临时表，因为性能更高。")]),_._v(" "),t("p",[t("strong",[_._v("1、如何创建临时表")])]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("create temporary table temp_user(id int primary key, name varchar(32), age int, index (name))engine=memory;\ninsert into temp_user select * from tb_user where b>=1 and b<=2000;\nselect * from tb_group join temp_user on (tb_group.b = temp_user.b);\n")])])]),t("p",[t("strong",[_._v("2、临时表的特性")])]),_._v(" "),t("p",[_._v("  1、临时表只能被创建它的事务访问，对其他事务不可见。在事务结束时，会自动删除临时表。")]),_._v(" "),t("p",[_._v("  2、临时表可以与普通表重名。事务内同时存在同名的临时表和普通表，增删改查操作是应用在临时表上的。")]),_._v(" "),t("p",[t("strong",[_._v("3、临时表的用途")])]),_._v(" "),t("p",[_._v("  临时表经常会被用于复杂查询的优化过程中，分库分表的跨库查询就是一个典型的应用场景。")]),_._v(" "),t("p",[t("strong",[_._v("4、MySQL在哪些地方使用了临时表")])]),_._v(" "),t("p",[_._v("  当使用union语句时，取两个子查询结果的交集，交集放在临时表中去重。而使用union all时，则不需要使用临时表。")]),_._v(" "),t("h2",{attrs:{id:"编码格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编码格式"}},[_._v("#")]),_._v(" 编码格式")]),_._v(" "),t("p",[_._v("  MySQL的utf-8编码格式只支持3字节的数据，当数据库需要存储emoji表情时，就可能出现"),t("code",[_._v("java.sql.SQLException: Incorrect string value: ‘\\xF0\\x9F\\x92\\x94’ for column ‘name’ at row 1")]),_._v("错误。")]),_._v(" "),t("p",[_._v("  utf8mb4编码是utf8编码的超集，兼容utf8，并且能存储4字节的表情字符。\n采用utf8mb4编码的好处是：存储与获取数据的时候，不用再考虑表情字符的编码与解码问题。"),t("strong",[_._v("修改数据库的编码为utf8mb4")]),_._v("，修改my.cnf（windows为my.ini）配置文件，需要添加以下配置。然后重启mysql即可。")]),_._v(" "),t("div",{staticClass:"language-conf extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("[client] \ndefault-character-set = utf8mb4 \n[mysql] \ndefault-character-set = utf8mb4 \n[mysqld] \ncharacter-set-client-handshake = FALSE \ncharacter-set-server = utf8mb4 \ncollation-server = utf8mb4_unicode_ci \ninit_connect='SET NAMES utf8mb4'\n")])])]),t("h2",{attrs:{id:"mysql结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql结构"}},[_._v("#")]),_._v(" MySQL结构")]),_._v(" "),t("p",[_._v("  大体来说，M有SQL可以分为Server和存储引擎两部分。结构如下图所示。")]),_._v(" "),t("img",{attrs:{src:"/数据库/01_SQL查询流程.png",width:"400px"}}),_._v(" "),t("p",[t("strong",[_._v("  连接器")]),_._v("：负责与客户端建立连接、获取权限、维护和管理连接，权限验证。建立好的连接，可以通过"),t("code",[_._v("show processlist")]),_._v("指令查看，Command列为Sleep，表示是一个空闲连接，空闲连接长时间没有操作，就会被自动断开，由参数"),t("code",[_._v("wait_timeout")]),_._v("控制，默认是8小时。")]),_._v(" "),t("p",[t("strong",[_._v("  分析器")]),_._v("：对SQL语句进行解析，语法分析和验证语句，比如表是否存在，列是否存在等。")]),_._v(" "),t("p",[t("strong",[_._v("  优化器")]),_._v("：执行计划生成，索引的选择。可以通过"),t("code",[_._v("explain")]),_._v("指令来获取执行计划，针对性进行调优。")]),_._v(" "),t("p",[t("strong",[_._v("  执行器")]),_._v("：在执行之前，还要判断一下是否有对表的操作权限，然后调用存储引擎接口，将符合条件的数据放入结果集，最终返回结果集给执行器。")]),_._v(" "),t("p",[t("strong",[_._v("  存储引擎")]),_._v("：存储数据，提供读写接口。")]),_._v(" "),t("h2",{attrs:{id:"常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[_._v("#")]),_._v(" 常用命令")]),_._v(" "),t("p",[t("strong",[_._v("1、修改字段部分内容")])]),_._v(" "),t("p",[_._v("update "),t("code",[_._v("表名")]),_._v(" SET "),t("code",[_._v("列名")]),_._v(" = REPLACE( "),t("code",[_._v("新的列名")]),_._v(", "),t("code",[_._v("'被替换内容'")]),_._v(", "),t("code",[_._v("'替换内容'")]),_._v(" );")]),_._v(" "),t("p",[t("strong",[_._v("2、修改字段")])]),_._v(" "),t("p",[_._v("alter table "),t("code",[_._v("表名")]),_._v(" MODIFY column "),t("code",[_._v("列名")]),_._v(" decimal(10,3);")]),_._v(" "),t("p",[t("strong",[_._v("3、添加字段")])]),_._v(" "),t("p",[_._v("alter TABLE "),t("code",[_._v("表名")]),_._v(" add "),t("code",[_._v("列名")]),_._v(" VARCHAR(20) NOT NULL comment '注释';")]),_._v(" "),t("p",[_._v("alter TABLE "),t("code",[_._v("表名")]),_._v(" add "),t("code",[_._v("列名")]),_._v(" VARCHAR(20) NOT NULL comment '注释' AFTER "),t("code",[_._v("列名")]),_._v(";在某个字段后面追加字段。")]),_._v(" "),t("h4",{attrs:{id:"数据库挂了"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库挂了"}},[_._v("#")]),_._v(" 数据库挂了")]),_._v(" "),t("p",[_._v("  连接MySQL，执行"),t("code",[_._v("SELECT 1;")]),_._v("如果正常返回，证明数据库进程还在，但不能证明数据库是没问题的。")]),_._v(" "),t("h4",{attrs:{id:"隐式类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[_._v("#")]),_._v(" 隐式类型转换")]),_._v(" "),t("p",[_._v("  当主键为varchar类型，而传入数值型主键时，会发生强制类型转换。会将"),t("strong",[_._v("索引树的主键转换为数值型")]),_._v("与传入参数比较。")]),_._v(" "),t("h4",{attrs:{id:"隐式字符编码转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式字符编码转换"}},[_._v("#")]),_._v(" 隐式字符编码转换")]),_._v(" "),t("p",[_._v("  当两个表进行关联查询时，如果驱动表的字段为"),t("code",[_._v("utf8mb4")]),_._v("类型，而被驱动表的字段为"),t("code",[_._v("utf8")]),_._v("类型。为了避免数据在转换过程中由于截断导致数据错误，都是按"),t("strong",[_._v("数据长度增加的方向")]),_._v("进行转换。也就是说被驱动表的字段需要进行转换，由"),t("code",[_._v("utf8->utf8mb4")]),_._v("。而导致全表扫描。")]),_._v(" "),t("h4",{attrs:{id:"sql执行顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql执行顺序"}},[_._v("#")]),_._v(" SQL执行顺序")]),_._v(" "),t("ul",[t("li",[_._v("from 子句组装来自不同数据源的数据")]),_._v(" "),t("li",[_._v("where 子句基于指定的条件对记录行进行筛选")]),_._v(" "),t("li",[_._v("group by 子句将数据划分为多个 分组")]),_._v(" "),t("li",[_._v("使用聚集函数进行计算")]),_._v(" "),t("li",[_._v("使用having 子句筛选分组")]),_._v(" "),t("li",[_._v("计算所有的表达式")]),_._v(" "),t("li",[_._v("order by 排序")]),_._v(" "),t("li",[_._v("select 集合输出")])])])}),[],!1,null,null,null);v.default=r.exports}}]);