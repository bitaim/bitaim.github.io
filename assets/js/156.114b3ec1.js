(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{356:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),a("h3",{attrs:{id:"创建线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建线程池"}},[t._v("#")]),t._v(" 创建线程池")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolCongfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" threadPoolExecutor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" threadPoolExecutor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScheduledThreadPoolExecutor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduledThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用的队列是 DelayedWorkQueue")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScheduledThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"关闭线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关闭线程池"}},[t._v("#")]),t._v(" 关闭线程池")]),t._v(" "),a("p",[t._v("  （1）调用"),a("code",[t._v("shutdown()")]),t._v("方法。后续提交的任务将会被拒绝，只可以处理正在执行和队列中的任务。")]),t._v(" "),a("p",[t._v("  （2）调用"),a("code",[t._v("List<Runnable> shutdownNow = threadPoolExecutor.shutdownNow()")]),t._v("方法后，中断所有的工作线程，清空队列中的任务并以集合的形式返回。")]),t._v(" "),a("h3",{attrs:{id:"异常宕机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常宕机"}},[t._v("#")]),t._v(" 异常宕机")]),t._v(" "),a("p",[t._v("  如果线上机器突然宕机，线程池的阻塞队列中的请求必然会丢失。在线程池提交任务之前，可以将任务信息保存到数据库，更新请求的状态：未提交、已提交、已完成。提交成功之后，更新状态为已提交。")]),t._v(" "),a("p",[t._v("  系统重启后，后台线程去扫描数据库里的未提交和已提交状态的任务，可以把任务的信息读取出来，重新提交到线程池里去，继续执行。")]),t._v(" "),a("h3",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("p",[a("strong",[t._v("1、使用线程池的好处")])]),t._v(" "),a("p",[t._v("  线程池，方便对线程的管理。对线程资源进行统一的分配和监控，尽可能地复用线程，而不是频繁创建和销毁线程（降低创建和消耗的性能损耗）。")]),t._v(" "),a("p",[a("strong",[t._v("2、线程并不是越多越好")])]),t._v(" "),a("p",[a("strong",[t._v("  线程占内存")]),t._v("。Java中万物皆对象，线程也不例外。既然是对象就需要"),a("strong",[t._v("占用内存")]),t._v("。在JVM规范中，一个线程默认最大栈大小为1MB。线程越多，消耗内存越多。")]),t._v(" "),a("p",[a("strong",[t._v("  线程加大操作系统压力")]),t._v("。线程不宜过多，操作系统需要频繁切换上下文，影响性能，最终导致所有线程执行都很慢。")]),t._v(" "),a("p",[a("strong",[t._v("3、如何确定合适数量的线程")])]),t._v(" "),a("p",[t._v("  如果是计算型、纯内存的操作，占用CPU会比较高，属于CPU密集型。建议是CPU数量的1~2倍。计算型任务通常采用大队列和小池，可以最大程度地减少CPU使用率，操作系统资源和上下文切换，但会导致人为地降低吞吐量。")]),t._v(" "),a("p",[t._v("  如果是IO型任务，比如调用第三方接口，读写文件等。可以多指定一些线程，需根据具体的"),a("strong",[t._v("IO阻塞时长")]),t._v("进行考量决定。IO型任务通常采用小队列和大池，则操作系统的线程调度开销则会增大，同样也会降低吞吐量。")]),t._v(" "),a("p",[t._v("  通过监控CPU情况，来"),a("strong",[t._v("动态的调整线程资源")]),t._v("，如果CPU使用率达到80%，那么是充分使用了CPU的资源。调整没有一定的模板，要不断的测试找到一个合适点。")])])}),[],!1,null,null,null);s.default=e.exports}}]);