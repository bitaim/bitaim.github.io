(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{243:function(e,t,r){"use strict";r.r(t);var o=r(0),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"zookeeper"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[e._v("#")]),e._v(" Zookeeper")]),e._v(" "),r("p",[e._v("  Zookeeper是一个开源的分布式协同服务系统。典型的应用场景是配置管理、DNS服务、组成员管理、分布式锁。Zookeeper适用于存储和协同相关的关键数据，不适合大数据量存储。")]),e._v(" "),r("p",[e._v("  Zookeeper是一个树状的数据模型。层次模型被称为data tree，每个节点称为znode，每个节点都可以保存数据，并且每个节点都有一个版本，版本从0开始计数。")]),e._v(" "),r("p",[e._v("  Zookeeper的节点分类，有持久性节点、临时性节点、持久性有序节点、临时性有序节点。持久性节点在被创建之后，发生集群宕机或者客户端宕机不会丢失，而临时性节点会被丢失。")]),e._v(" "),r("h3",{attrs:{id:"总体架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总体架构"}},[e._v("#")]),e._v(" 总体架构")]),e._v(" "),r("p",[e._v("  Zookeeper有两种模式，一种是standalone（单机）模式，一种是quorum（多节点）模式。当Zookeeper客户端连接到Zookeeper集群，会与其中一个节点建立连接，创建一个session会话。")]),e._v(" "),r("p",[e._v("  客户端可以主动关闭session。服务端如果在一定时间内没有收到客户端的消息，服务端也会关闭session。客户端与某一服务端建立连接出错时，会自动和其他服务端节点建立连接。")]),e._v(" "),r("h3",{attrs:{id:"配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),r("div",{staticClass:"language-conf extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("79,79,1593436743412,1593436743412,0,0,0,0,5,0,79\n")])])]),r("h3",{attrs:{id:"常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),r("p",[r("code",[e._v("create /root")]),e._v(" 创建节点")]),e._v(" "),r("p",[r("code",[e._v("create -e /root/curator/push_1")]),e._v(" 创建临时节点")]),e._v(" "),r("p",[r("code",[e._v("ls /root/curator")]),e._v(" 查看节点下的节点")]),e._v(" "),r("p",[r("code",[e._v("get /root/curaotr")]),e._v(" 查看节点的值")]),e._v(" "),r("p",[r("code",[e._v("set /root/curator/push_1")]),e._v(" 给节点赋值")]),e._v(" "),r("p",[e._v("通过临时节点实现一个锁，临时节点保证客户端异常宕机时能够删除该节点，保证安全。")]),e._v(" "),r("p",[e._v("客户端1创建临时节点"),r("code",[e._v("create -e /lock")]),e._v("。当客户端2调用相同指令时，会抛出Node already exists错误。\n客户端2通过"),r("code",[e._v("stat -w /lock")]),e._v("对节点进行监听。\n当客户端1退出时，客户端2会收到通知。")]),e._v(" "),r("p",[e._v("Master Worker协同。")]),e._v(" "),r("p",[e._v("多个节点使用指令"),r("code",[e._v("create -e /master")]),e._v("，成功创建的成为master节点。创建失败的节点，进行监听"),r("code",[e._v("stat -w /master")]),e._v("。")])])}),[],!1,null,null,null);t.default=a.exports}}]);