(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{211:function(v,_,r){"use strict";r.r(_);var o=r(0),t=Object(o.a)({},(function(){var v=this,_=v.$createElement,r=v._self._c||_;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("h1",{attrs:{id:"分代模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分代模型"}},[v._v("#")]),v._v(" 分代模型")]),v._v(" "),r("p",[v._v("  分代模型指的是堆空间的内存划分，堆空间分为年轻代、老年代。")]),v._v(" "),r("p",[v._v("  根据每一层的特点，选择最合适的垃圾回收器。又因垃圾回收器的不同，采取的垃圾回收算法也不同，因此被称为"),r("strong",[v._v("分代模型")]),v._v("。")]),v._v(" "),r("p",[r("strong",[v._v("1、垃圾对象的来源")])]),v._v(" "),r("p",[v._v("  随着Java项目不停的运行，必然会产生大量的对象，而这些对象在逻辑执行完毕之后，就成为了没有引用的垃圾对象。还记得每个线程的虚拟机栈中，当调用方法时就会创建相应的栈帧压入栈中，而每个栈帧都有一个局部变量表，指向堆中的对象，当栈帧运行完毕出栈后，这些堆中的对象就成为垃圾对象。")]),v._v(" "),r("p",[r("strong",[v._v("2、哪些对象是不能回收的呢")]),v._v("？")]),v._v(" "),r("p",[v._v("  有一种引用计数法的算法，当一个对象有一个引用时，就将引用计数加一。但是这种算法，无法解决循环引用的问题。因此被淘汰。")]),v._v(" "),r("p",[v._v("  目前JVM使用一种"),r("strong",[v._v("可达性分析算法")]),v._v("来判断哪些对象可以被回收，哪些对象不可以被回收。")]),v._v(" "),r("p",[v._v("  每个对象都分析一下有谁在引用他，然后一层一层向上判断，看是否有一个GC Roots。在JVM规范中，"),r("strong",[v._v("局部变量就可以作为GC Roots")]),v._v("。只要一个对象被局部变量引用了，那么就说明存放GC Roots，不可以被回收。"),r("strong",[v._v("静态变量也可以看作是一种GC Roots")]),v._v("，也不会被回收。")]),v._v(" "),r("p",[v._v("  有一种特殊情况，即使堆内存中的对象没有GC Roots的引用。但是如果该对象重写了"),r("code",[v._v("finalize()")]),v._v("方法，当发生垃圾回收时，会尝试拯救一下该对象，避免被回收。比如将一个GC Roots指向自己，就不需要被回收了。但其实这种方式几乎不用。")]),v._v(" "),r("h3",{attrs:{id:"年轻代"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#年轻代"}},[v._v("#")]),v._v(" 年轻代")]),v._v(" "),r("p",[v._v("  年轻代又分为三个内存区域，Eden区、Survivor1区、Survivor2区。新生代三个区域的内存分配比例默认为8:1:1，使用率高达90%。")]),v._v(" "),r("p",[v._v("  当需要创建对象时，对象就会被分配在Eden区。当Eden区不足以容纳新对象时，就会触发Minor GC（Young GC，新生代的垃圾回收）。")]),v._v(" "),r("p",[v._v("  将Eden区和一块Survivor区的存活对象标记出来，复制到另外一块空闲的Survivor区域中，并整齐地排列起来。然后清空Eden区和Survivor区域。也就是说，总归有一块Survivor区是空闲的。"),r("strong",[v._v("新生代的特点是，存活对象很少，因此复制算法效率很高")]),v._v("。")]),v._v(" "),r("p",[r("strong",[v._v("1、完整的 Young GC 过程")])]),v._v(" "),r("p",[v._v("  当Eden区不足以容纳新对象时，就会触发Minor GC。在触发之前，有如下判断步骤。")]),v._v(" "),r("p",[v._v("  条件一："),r("code",[v._v("老年代可用空间大小 > 新年代所有对象所占内存大小")])]),v._v(" "),r("p",[v._v("  条件二："),r("code",[v._v("老年代可用空间大小 > 历次Minor GC晋升老年代的对象的平均内存大小")])]),v._v(" "),r("p",[v._v("  如果满足条件之一，则可以尝试执行Minor GC。 否则，需要首先触发一次Old GC，再触发Minor。")]),v._v(" "),r("p",[v._v("  当进行Minor GC之后。")]),v._v(" "),r("p",[v._v("  （1）如果存活对象所占内存小于Survivor区，则将存活对象复制到Survivor区即可。")]),v._v(" "),r("p",[v._v("  （2）如果大于Survivor区，却小于老年代可用内存空间，则将存活对象直接晋升到老年代。")]),v._v(" "),r("p",[v._v("  （3）如果既大于Survivor区，也大于老年代可用内存空间。如果之前是触发过Old GC，再触发Minor GC，那么就会抛出OOM内存溢出。如果之前是尝试执行Minor GC，那么还可以尝试一次Old GC进行拯救，腾出老年代空间来存放这些新生代存活对象。如果还是放不下，那么也会抛出OOM内存溢出，放得下就安全了。")]),v._v(" "),r("h3",{attrs:{id:"老年代"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#老年代"}},[v._v("#")]),v._v(" 老年代")]),v._v(" "),r("p",[v._v("  老年代采取的垃圾回收算法是"),r("strong",[v._v("标记整理算法")]),v._v("。")]),v._v(" "),r("p",[v._v("  首先标记出存活对象，将这些存活对象紧凑的移动到一起，避免产生内存碎片，然后一次性将垃圾对象回收掉。")]),v._v(" "),r("p",[v._v("  内存碎片的危害，如果这些内存碎片加起来有很大的一块内存区域，但"),r("strong",[v._v("却没有一块完整连续的内存空间来分配对象")]),v._v("，那么势必会导致更加频繁的GC。")]),v._v(" "),r("p",[v._v("  老年代的垃圾回收要比新生代的垃圾回收慢10倍。"),r("strong",[v._v("如果老年代频繁执行Full GC，将会严重影响系统性能")]),v._v("。")]),v._v(" "),r("p",[r("strong",[v._v("1、对象有哪些途径进入老年代")]),v._v("？")]),v._v(" "),r("ol",[r("li",[v._v("大对象跳过新生代直接进入老年代。由参数"),r("code",[v._v("-XX:PretenureSizeThreshold")]),v._v("决定。")]),v._v(" "),r("li",[v._v("新生代中的对象躲过数次Minor GC，就会被转移到老年代。由参数"),r("code",[v._v("-XX:MaxTenuringThreshold")]),v._v("决定，默认是15。")]),v._v(" "),r("li",[v._v("老年代空间担保规则。新生代触发Minor GC后存活对象太多无法放入Survivor区时，这批存活对象直接进入老年代。")]),v._v(" "),r("li",[v._v("动态年龄判断。当Survivor区中一批对象（age_1_memory + age_2_memory + ... + age_n_memory）占用内存超过50%时，就会将年龄n及以上的对象转移到老年代。")])]),v._v(" "),r("h3",{attrs:{id:"gc的影响"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gc的影响"}},[v._v("#")]),v._v(" GC的影响")]),v._v(" "),r("p",[r("strong",[v._v("1、新生代GC的影响")])]),v._v(" "),r("p",[v._v("  新生代GC通常来说影响不大，几乎也不需要调优。当Eden区满了无法存放新对象时就会触发一次GC。")]),v._v(" "),r("p",[v._v("  如果要对新生代GC进行调优，一般来说，只需要分配给系统足够的内存即可。核心点还是在于堆内存、新生代内存的分配。内存足够的话，在低峰期新生代可能每几个小时才会触发一次新生代GC，在高峰期几分钟一次新生代GC。")]),v._v(" "),r("p",[v._v("  一般的业务系统，都是部署在2核4G或者4核8G的机器上。")]),v._v(" "),r("p",[v._v("  当系统部署在大内存机器上时，比如32核64G的机器。此时新生代的Eden区可能有30~40G内存。比如类似Kafka、Elasticsearch之类的大数据相关的系统。如果系统负载较高，对于大数据系统可能会有每秒钟几万的请求量，然后执行垃圾回收时需要几秒钟。可能每过几分钟，系统就要卡顿几秒钟。有的请求一旦卡死几秒钟就会超时报错，此时可能会导致系统频繁报错。这种情况下，"),r("strong",[v._v("新生代GC对系统的影响很大")]),v._v("。")]),v._v(" "),r("p",[v._v("  解决大内存机器上新生代GC过慢的问题，就要使用G1垃圾回收器。可能每过一段时间，就会针对2G内存的Region进行垃圾回收，此时仅仅停顿20ms，然后回收掉2G内存，腾出部分空间，接着让系统继续运行。"),r("strong",[v._v("G1天生就适合于大内存机器上的JVM运行，可以完美解决大内存垃圾回收时间长的问题")]),v._v("。")]),v._v(" "),r("p",[r("strong",[v._v("1、老年代GC的影响")])])])}),[],!1,null,null,null);_.default=t.exports}}]);