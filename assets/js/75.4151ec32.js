(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{274:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"tomcat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tomcat"}},[t._v("#")]),t._v(" Tomcat")]),t._v(" "),s("p",[t._v("  Tomcat是SpringBoot内嵌的Servlet容器，也是最常用的Web容器。Tomcat8开始采用NIO的网络模型，之前采用BIO的网络模型。")]),t._v(" "),s("h2",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5085")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tomcat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接超时时间，默认值为60000ms")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 客户端与服务端建立连接后，服务端在超时时间内等待客户端的消息，如果客户端一直不发消息，则服务端会主动关闭该连接")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("connection-timeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 700ms\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Tomcat与客户端可以建立连接的最大数量，默认值为10000")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("max-connections")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("accept-count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Tomcat工作线程的最大数量，默认值为200")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("threads")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n")])])]),s("p",[s("strong",[t._v("1、acceptCount参数")])]),t._v(" "),s("p",[t._v("  当客户端与服务端建立连接之后，就会进入到"),s("strong",[t._v("操作系统级别的队列")]),t._v("中，队列长度由"),s("code",[t._v("acceptCount")]),t._v("决定。")]),t._v(" "),s("p",[t._v("  该参数受到Linux系统参数"),s("code",[t._v("/proc/sys/net/core/somaxconn")]),t._v("的影响，操作系统中该参数默认值为128。如果"),s("code",[t._v("acceptCount")]),t._v("参数大于操作系统的操作，则以操作系统为主。")]),t._v(" "),s("p",[t._v("  Tomcat会监听操作系统的一些事件，来处理这些建立好的连接。"),s("code",[t._v("max-connections")]),t._v("参数是Tomcat所能建立连接的最大数量。当Tomcat建立的连接数一满，并且操作系统级别的队列一满，在Windows系统下，就会拒绝新的连接。而在Linux系统中，还有一层三次握手的队列，再然后是操作系统中完成握手的队列。简单的认为，"),s("strong",[t._v("tomcat能够建立连接的最大数量为"),s("code",[t._v("max-connections")]),t._v("参数与"),s("code",[t._v("acceptCount")]),t._v("参数的和即可")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发"}},[t._v("#")]),t._v(" 开发")]),t._v(" "),s("p",[s("strong",[t._v("1、定制化SpringBoot内置Tomcat")])]),t._v(" "),s("p",[t._v("  通过对Tomcat的长连接进行配置，提升请求性能。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TomcatConfig")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebServerFactoryCustomizer")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableServletWebServerFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("customize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableServletWebServerFactory")]),t._v(" factory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TomcatServletWebServerFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" factory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addConnectorCustomizers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connector "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Http11NioProtocol")]),t._v(" http11NioProtocol "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Http11NioProtocol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" connector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProtocolHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个长连接支持的最大请求数量，默认值为100")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当参数为 -1 时，表示不限制请求数量")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当参数为 1  时，表示禁用长连接")]),t._v("\n            http11NioProtocol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxKeepAliveRequests")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 建立长连接后，无请求时的长连接保持时长")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认值等于connectiontimeout的时长，也就是60000毫秒")]),t._v("\n            http11NioProtocol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setKeepAliveTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("2、Tomcat的长连接")])]),t._v(" "),s("p",[t._v("  （1）Http1.1默认支持长连接，当客户端与服务端建立连接后，后续的请求可以复用该连接，避免了频繁建立连接的损耗。")]),t._v(" "),s("p",[t._v("  （2）客户端发送Http请求时，请求头携带"),s("code",[t._v("Connection: keep-alive")]),t._v("表示希望建立一个长连接。")]),t._v(" "),s("p",[t._v("  （3）如果服务端同样支持长连接，服务端在响应数据后不会立马断开连接，尝试复用连接。")]),t._v(" "),s("p",[t._v("  （4）当达到长连接最大请求数量时，服务端会响应头中携带"),s("code",[t._v("Connection: close")]),t._v("，表示要客户端关闭长连接。")]),t._v(" "),s("p",[t._v("  （5）实验如下。")]),t._v(" "),s("div",{staticClass:"language-plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 启动Tomcat进程\n[root@iz2ze4oq2onbrfblgura6tz jar]# netstat -anp | grep 8080\ntcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      7351/java\n\n# 客户端与服务端建立连接后，显示 ESTABLISHED状态（如果该连接是长连接，则保持KeepAliveTimeout的时间）\n# 当有后续请求时，重置持续时间\n[root@iz2ze4oq2onbrfblgura6tz jar]# netstat -anp | grep 8080\ntcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      7351/java           \ntcp        0      0 172.17.115.0:8080       120.11.173.121:18935    ESTABLISHED 7351/java\n")])])]),s("p",[t._v("  （6）阿里巴巴开发手册中提到，在Linux服务器上通过变更"),s("code",[t._v("/etc/sysctl.conf")]),t._v("文件去修改缺省值"),s("code",[t._v("net.ipv4.tcp_fin_timeout = 30")]),t._v("，该参数在默认情况下是60秒。")]),t._v(" "),s("p",[t._v("  高并发服务器下建议调小TCP协议的"),s("code",[t._v("time_wait")]),t._v("超时时间，在高并发访问下，服务器端会因为处理"),s("code",[t._v("time_wait")]),t._v("的连接数太多，可能无法建立新的连接，所以需要调小此等待值。")]),t._v(" "),s("p",[s("strong",[t._v("3、Time_Wait连接")])]),t._v(" "),s("p",[t._v("  当Tomcat不支持长连接时，客户端请求服务端，每一个请求结束后，客户端都会主动断开连接，主动断开连接的一方进入"),s("code",[t._v("TIME_WAIT")]),t._v("状态。")]),t._v(" "),s("p",[t._v("  当Tomcat支持长连接时。服务端与客户端建立了一个持久连接，持续时间为30秒钟，客户端在期间也没有新的请求进来，那么服务端会在30秒后主动断开连接。"),s("strong",[t._v("正常情况下，期待的是客户端请求结束之后主动断开连接")]),t._v("，但不能保证客户端不主动关闭的情况，或者非法连接的情况。")]),t._v(" "),s("h2",{attrs:{id:"运维"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运维"}},[t._v("#")]),t._v(" 运维")]),t._v(" "),s("p",[s("strong",[t._v("1、如何安装Tomcat")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://tomcat.apache.org/download-80.cgi?fileGuid=rQtjKTrVVWVKJPTT",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://tomcat.apache.org/download-80.cgi"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("  在官网中下载对应的软件包，Windows选择"),s("code",[t._v("64-bit Windows zip (pgp, sha512)")]),t._v("，Linux选择"),s("code",[t._v("tar.gz (pgp, sha512)")]),t._v("。解压后即安装成功。")]),t._v(" "),s("p",[s("strong",[t._v("2、常用命令")])]),t._v(" "),s("p",[t._v("  在解压后的Tomcat/bin目录下，是常用的命令脚本。")]),t._v(" "),s("p",[t._v("  启动Tomcat，Windows下是"),s("code",[t._v("startup.bat")]),t._v("，Linux下是"),s("code",[t._v("startup.sh")]),t._v("。")]),t._v(" "),s("p",[t._v("  停止Tomcat，Windows下是"),s("code",[t._v("shutdown.bat")]),t._v("，Linux下是"),s("code",[t._v("shutdown.sh")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("3、访问Tomcat时，如何直接访问到某个项目")])]),t._v(" "),s("p",[t._v("  （1）修改"),s("code",[t._v("tomcat/webapps/ROOT")]),t._v("目录下的"),s("code",[t._v("index.jsp")]),t._v("文件，配置如下。当访问"),s("code",[t._v("ip:port")]),t._v("时，Tomcat会自动重定向到"),s("code",[t._v("ip:port/项目名")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-conf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('<%\njava.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy");\nrequest.setAttribute("year", sdf.format(new java.util.Date()));\nrequest.setAttribute("tomcatUrl", "https://tomcat.apache.org/");\nrequest.setAttribute("tomcatDocUrl", "/docs/");\nrequest.setAttribute("tomcatExamplesUrl", "/examples/");\n# 新增如下一行\nresponse.sendRedirect("/web");\n%>\n')])])]),s("p",[t._v("  （2）修改"),s("code",[t._v("tomcat/conf")]),t._v("目录下的"),s("code",[t._v("server.xml")]),t._v("文件，配置如下。当访问"),s("code",[t._v("ip:port")]),t._v("时，可以直接访问到"),s("code",[t._v("项目名")]),t._v("下，在地址栏上忽略了项目名。")]),t._v(" "),s("div",{staticClass:"language-plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('<Host name="localhost"  appBase="webapps"\n            unpackWARs="true" autoDeploy="true">\n    \x3c!-- 新增如下一行 --\x3e \n    <Context path="/" docBase="web" />\n</Host>\n')])])])])}),[],!1,null,null,null);a.default=e.exports}}]);