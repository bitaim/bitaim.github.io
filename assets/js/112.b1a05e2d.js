(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{394:function(_,v,t){"use strict";t.r(v);var p=t(14),r=Object(p.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"分库分表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分库分表"}},[_._v("#")]),_._v(" 分库分表")]),_._v(" "),t("p",[t("strong",[_._v("1、什么时候适合分表")])]),_._v(" "),t("p",[_._v("  如果一行数据的大小 小于 100字节，那么表中的数量到达5000万时适合分表。")]),_._v(" "),t("p",[_._v("  如果一行数据的大小 大于等于 100字节，那么表中的数量到达1000万时适合分表。")]),_._v(" "),t("p",[t("strong",[_._v("2、分成多少个表合适")])]),_._v(" "),t("p",[_._v("  估算自身的业务增长量，计算表的数量，数量为2的幂次方。")]),_._v(" "),t("p",[t("strong",[_._v("3、partition key的选择")])]),_._v(" "),t("p",[_._v("  比如用户表可以按照城市、时间、用户的唯一标识等。")]),_._v(" "),t("p",[t("strong",[_._v("4、分表后数据如何查询")])]),_._v(" "),t("p",[_._v("  比如用户表分表后。")]),_._v(" "),t("p",[_._v("  如果只根据用户主键查询，可以通过"),t("code",[_._v("用户主键 % 表数量")]),_._v("路由到相关表查询即可。")]),_._v(" "),t("p",[_._v("  如果根据手机号查询呢？那就需要建立一张手机号与用户主键的映射表，再路由到相关表进行查询。")]),_._v(" "),t("p",[_._v("  如果根据用户名进行查询呢？用户名是中文的，不能像手机号做取模运算了，中文可以通过"),t("code",[_._v("CRC-32")]),_._v("进行哈希运算后，路由到不同的表中。")]),_._v(" "),t("p",[_._v("  比如商品表分表后。")]),_._v(" "),t("p",[_._v("  如果只根据商品主键查询，可以通过"),t("code",[_._v("商品主键 % 表数量")]),_._v("路由到相关表查询即可。")]),_._v(" "),t("p",[_._v("  如果根据用户主键查询所发布的商品呢？可能某个用户发布的商品均匀的分散在所有的分表中，每次查询需要查询所有表然后聚合数据，在对数据进行条件处理。有一种基因法的方案，意思为在生成商品主键的时候，植入用户id的部分属性，使某个用户创建的商品全部创建在一张表中。原理如下：")]),_._v(" "),t("p",[_._v("  （1）此时商品表有16张。")]),_._v(" "),t("p",[_._v("  （2）某个商品的ID为78，其二进制为 "),t("code",[_._v("1001110")]),_._v("，可以看作 "),t("code",[_._v("78 = 64 + 8 + 4 + 2")]),_._v(" 。78 % 16 = 14，具体路由到哪个表是由二进制的后4位决定的，第5位及以上位 % 16 都为 0。")]),_._v(" "),t("p",[_._v("  （3）根据上面的思路，可以将用户id的后4位植入到商品id的后4位中，这样就可以将某个用户的商品创建在一张表中，这就是"),t("strong",[_._v("基因法")]),_._v("。但需要自己创建一个算法，生成相应的主键。")]),_._v(" "),t("p",[_._v("  根据id查询时，"),t("code",[_._v("shardingSphere")]),_._v("框架能自能帮助我们路由到哪个表中。根据用户id查询时，我们可以指定查询某个商品表进行查询就行了。")]),_._v(" "),t("h2",{attrs:{id:"扩容方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩容方案"}},[_._v("#")]),_._v(" 扩容方案")]),_._v(" "),t("p",[_._v("  58同城用的扩容方案，从节点升级为主库的方式，2倍扩容法。")]),_._v(" "),t("p",[t("strong",[_._v("1、为什么需要分库分表")])]),_._v(" "),t("p",[_._v("  如果用户量越来越大，每秒钟的并发请求就会越来越高，数据量越来越大又会影响MySQL查询的性能。")]),_._v(" "),t("p",[_._v("  （1）当注册用户为20万时，每天活跃用户为1万，每天单表的数据量为1000，高峰期每秒钟并发请求最多就10。")]),_._v(" "),t("p",[_._v("  （2）当注册用户为2000万时，每天活跃用户为100万，每天单表数据量为10万，高峰期每秒钟并发请求达到1000。")]),_._v(" "),t("p",[_._v("  每天单表10万条数据，一个月就300万条数据。很容易就会到达查询的瓶颈。")]),_._v(" "),t("p",[_._v("  每秒钟高峰期请求1000左右，对于Web服务器而言我们可以通过集群部署来分摊这1000个请求，对于MySQL数据库而言1000QPS也可以凑合承受。")]),_._v(" "),t("p",[_._v("  （3）当注册用户上亿时，每天活跃用户上万千，每天单表新增上百万，目前一个表总数据已经达到了两三千万，数据库磁盘容量不断消耗掉。高峰期每秒钟并发达到惊人的5000~8000。")]),_._v(" "),t("p",[_._v("  这需要就需要"),t("strong",[_._v("通过分库分表来支撑高并发和数据量大这两个问题")]),_._v("。")]),_._v(" "),t("p",[t("strong",[_._v("2、表如何拆分")])]),_._v(" "),t("p",[_._v("  水平分表。将一个大表拆分为多个表结构相同的小表，每一个小表存储一部分数据。")]),_._v(" "),t("p",[_._v("  垂直分表。比如将一个字段比较多的用户表，拆分成用户表和用户详情表。")]),_._v(" "),t("p",[t("strong",[_._v("3、库如何拆分")])]),_._v(" "),t("p",[_._v("  水平分库。通常配合水平分表进行。比如用户库_01里，有一个用户表_01等。")]),_._v(" "),t("p",[_._v("  垂直分库。根据业务将不同系统的表拆分到不同的库里。比如在电商系统中，会拆分到用户库、商品库、订单库等。")]),_._v(" "),t("h2",{attrs:{id:"用户表拆分方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户表拆分方案"}},[_._v("#")]),_._v(" 用户表拆分方案")]),_._v(" "),t("p",[_._v("  对于用户表，通常采用哈希取模分片的方式。通常对于用户的查询方式有主键和手机号，这里使用户主键做为分区键，因为其使用频率更高。")]),_._v(" "),t("p",[_._v("  当用户登录时，通常会使用手机号查询用户的信息。为了避免对所有的用户表进行查询，我们可以"),t("strong",[_._v("建立手机号与用户主键的映射表")]),_._v("，映射表使用手机号做分区键。首先通过映射表确定用户主键，在通过用户主键查询用户信息，通过两次查询确定用户的信息。")]),_._v(" "),t("p",[_._v("  建立映射表有一个缺点，那就是需要维护全量数据。如果数据量达到一定程度，也需要做分库分表处理。")]),_._v(" "),t("p",[_._v("  用户注册时，在缓存中通过手机号查询用户主键，如果不存在则走注册流程。注册成功后，同时维护缓存（不设置过期时间）和映射表。")]),_._v(" "),t("h2",{attrs:{id:"订单表拆分方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#订单表拆分方案"}},[_._v("#")]),_._v(" 订单表拆分方案")]),_._v(" "),t("p",[_._v("  对于每一笔订单，通常会满足许多维护的查询，比如用户维度（买了啥）和商家维度（有谁买了）。")]),_._v(" "),t("p",[_._v("  为了满足两端用户的业务场景，采用空间换时间的方案，将一份订单的生成记录为两份。C端的订单记录通过用户ID为分片键，B端的订单记录通过公司ID为分片键。")]),_._v(" "),t("p",[_._v("  淘宝的订单记录可能会存在更多的备份。这种冗余设计叫做全表冗余，用户表的映射表叫做关系冗余。")]),_._v(" "),t("h2",{attrs:{id:"如何切换到分库分表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何切换到分库分表"}},[_._v("#")]),_._v(" 如何切换到分库分表")]),_._v(" "),t("p",[t("strong",[_._v("1、停机维护方案")])]),_._v(" "),t("p",[_._v("  给公告，晚上进行停机维护。通过后台程序将数据查询出来，基于分库分表中间件分发到对应的库和表。如果没搞定，可以回滚继续基于单库单表继续跑，第二天继续搞。")]),_._v(" "),t("p",[_._v("  缺点，出现几个小时的停机，用户不可用。")]),_._v(" "),t("p",[t("strong",[_._v("2、不停机双写方案")])]),_._v(" "),t("p",[_._v("  修改系统中所有写库的代码，同时写老库和新的分库分表的库。")]),_._v(" "),t("p",[_._v("  后台数据迁移临时工具，去读取老库的数据写到新的分库分表的库。但是在写入之前要判断一下这个数据是否存在，不存在直接写入。存在的话，比较两个数据的时间戳，绝对不允许旧数据覆盖新数据。")]),_._v(" "),t("p",[_._v("  迁移完了一轮，就需要执行一次检查，检查一次单库单表中的数据是否和分库分表中的数据是否一模一样，有差别的数据在进行修改。")]),_._v(" "),t("p",[_._v("  依次循环往复，这个后台程序可能得跑好几天，到了凌晨的时候，几乎没什么新的数据进来了，此时一般来说老库和新库的数据会变成\n一样的。最后一步修改系统的代码，将写单库单表的代码给删除掉，只写分库分表，在部署一下就可以了。")])])}),[],!1,null,null,null);v.default=r.exports}}]);