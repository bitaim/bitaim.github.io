(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{391:function(t,a,e){"use strict";e.r(a);var s=e(14),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"分布式理论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式理论"}},[t._v("#")]),t._v(" 分布式理论")]),t._v(" "),e("h2",{attrs:{id:"cap定理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cap定理"}},[t._v("#")]),t._v(" CAP定理")]),t._v(" "),e("p",[t._v("  CAP理论是指在一个分布式系统中，Consistency（一致性）、Availability（可用性），Partition Tolerance（分区容错性），三者不可同时兼得。通常情况下，对于一个分布式系统，P属性是不可缺少的，那就只能在A和C之间做取消，因此出现了AP和CP模型。")]),t._v(" "),e("p",[t._v("  常见的CP模型，比如Zookeeper，Zookeeper保证了数据的强一致性，当出现数据不一致时，各个节点的功能均不可用。")]),t._v(" "),e("p",[t._v("  常见的AP模型，比如Redis，Redis主从节点之间的数据复制是异步的，在一定程度上会造成数据短暂的不一致，但会保证最终一致性。")]),t._v(" "),e("h2",{attrs:{id:"base理论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#base理论"}},[t._v("#")]),t._v(" BASE理论")]),t._v(" "),e("p",[t._v("  BASE理论的核心思想是，既然无法做到强一致性，那么应用根据自身的业务特点，采用适当的方式来使系统达到最终一致性。")]),t._v(" "),e("p",[t._v("  Bascially Available（基本可用）。当系统出现不可预知的故障时，保证其基本功能可用，可能在性能或者功能上受到影响。比如加入熔断和降级的一些措施，天猫双十一不可以取消订单、修改地址等。")]),t._v(" "),e("p",[t._v("  Soft State（软状态）。允许系统中的数据存在中间状态，但该状态不会影响系统的整体可用性。比如派发订单中，同步中等。")]),t._v(" "),e("p",[t._v("  Eventually consistent（最终一致性）。数据最终能够达到一致的状态。")])])}),[],!1,null,null,null);a.default=r.exports}}]);