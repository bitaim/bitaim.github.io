(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{246:function(s,v,_){"use strict";_.r(v);var t=_(0),e=Object(t.a)({},(function(){var s=this,v=s.$createElement,_=s._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[_("h1",{attrs:{id:"分布式锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[s._v("#")]),s._v(" 分布式锁")]),s._v(" "),_("h3",{attrs:{id:"演化史"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#演化史"}},[s._v("#")]),s._v(" 演化史")]),s._v(" "),_("p",[s._v("  （1）使用Redis的"),_("code",[s._v("setnx")]),s._v("的特性，当key不存在时才可以设置成功。并使用"),_("code",[s._v("expire")]),s._v("命令对该key设置过期时间，避免客户端意外宕机导致锁无法被释放的问题。该阶段，并没有保证这两条Redis命令的原子性，无法保证锁一定会添加过期时间。")]),s._v(" "),_("p",[s._v("  （2）Redis高版本之后，可以使用"),_("code",[s._v("setnx ex")]),s._v("命令，保证加锁和设置过期时间变成了一条原子命令。该阶段，其实还存在一个问题，那就是可能出现多个客户端加锁的情况。比如某个业务我们需要保证在同一时间下，只有一个客户端可以执行。如果某个业务突然执行过于缓慢，执行时间大于了锁的过期时间。那么锁自动释放后，又会有另外一个客户端成功加锁，那么此时就出现多个客户端同时执行的场景。还要避免客户端释放其他客户端锁的问题。")]),s._v(" "),_("p",[s._v("  （3）分布式锁的续期问题。当客户端加锁成功后，有一个后台线程通过一定策略定期对加锁成功的客户端进行续期。而Redisson框架就替我们实现了这一功能。")]),s._v(" "),_("h3",{attrs:{id:"锁丢失"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#锁丢失"}},[s._v("#")]),s._v(" 锁丢失")]),s._v(" "),_("p",[s._v("  在Redis单节点架构下，"),_("strong",[s._v("不存在锁丢失问题，但存在高可用问题")]),s._v("，一旦节点宕机，那么分布式锁加锁全部失败。")]),s._v(" "),_("p",[s._v("  为了支持分布式锁的高可用，可以采用哨兵架构。由于Redis的集群（主从、哨兵、集群）架构下，都是AP模型，节点之间的数据同步是异步的。在极端情况下，某个客户端成功后，在没有同步到从节点时，主节点宕机，某个从节点升级为主节点，此时加锁信息丢失，其他客户端又可以加锁成功。因此出现了"),_("strong",[s._v("锁丢失")]),s._v("的问题。")]),s._v(" "),_("p",[s._v("  如果一定要解决分布式锁丢失的问题，可以采用Zookeeper做分布式锁，利用其临时顺序节点的特性，并且是公平锁的方式按顺序逐一加锁，节点之间需要做写同步，是"),_("strong",[s._v("能保证锁不丢失，但是加锁性能太差")]),s._v("。")]),s._v(" "),_("p",[s._v("  如果一定要解决分布式锁丢失的问题，可以采用RedLock红锁方案，RedLock是Redis官方提供的方案，但在实际应用中使用的不多。RedLock的概念下需要至少奇数个Master主节点，比如3个。多个主节点之间相互独立，彼此之间不存在主从同步和数据赋值。如果在超过半数的机器上可以获取锁成功，则获取分布式锁成功。降级了多个客户端获取到锁的概率。因为需要部署多个节点，"),_("strong",[s._v("使用的资源（服务器）比较多，成本太大")]),s._v("。分布式锁的应用场景一般都是在高并发的情况下，因为需要对多个节点执行加锁和解锁命令，所以这种方式"),_("strong",[s._v("对性能的影响比较大")]),s._v("。")]),s._v(" "),_("h2",{attrs:{id:"redisson"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redisson"}},[s._v("#")]),s._v(" Redisson")]),s._v(" "),_("p",[s._v("  Redisson方案是目前最常用的分布式锁方案，支持单机、主从、哨兵、集群的不同架构下的加锁方案。")]),s._v(" "),_("p",[s._v("  底层通过"),_("strong",[s._v("lua脚本")]),s._v("对"),_("strong",[s._v("获取分布式锁，移除分布式锁")]),s._v("进行了封装，保证了其原子性。同时"),_("strong",[s._v("实现了可重入加锁")]),s._v("，lua脚本采用的是"),_("strong",[s._v("hash")]),s._v("的数据结构，\n可以记录获取锁的次数。并通过看门狗机制自动对分布式锁续期，看门狗每隔10秒去检查以下锁是否还被当前客户端持有，如果持有，则对key续期。")]),s._v(" "),_("p",[s._v("  Redisson加锁key定义为"),_("code",[s._v("{uuid:threadId}")]),s._v("，比如"),_("code",[s._v("83fa0c60-257b-41dd-a221-33e9f285e3cb:1")]),s._v("。")]),s._v(" "),_("h3",{attrs:{id:"加锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#加锁"}},[s._v("#")]),s._v(" 加锁")]),s._v(" "),_("p",[s._v("  当加锁成功或者重入加锁成功时，会返回null。然后进入看门狗逻辑，对成功加锁的线程不断地续期。")]),s._v(" "),_("p",[s._v("  当加锁失败时，返回锁的剩余存活时间。然后利用Redis订阅事件，来及时响应其他客户端释放锁的消息通知。")]),s._v(" "),_("h3",{attrs:{id:"解锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解锁"}},[s._v("#")]),s._v(" 解锁")]),s._v(" "),_("p",[s._v("  解锁时，将加锁次数减一，加锁次数为0时释放锁。然后利用Redis的特性，通过publish发布事件，来唤醒那些加锁失败从而订阅事件的客户端。解锁成功后，关闭开门狗逻辑。")]),s._v(" "),_("h3",{attrs:{id:"看门狗失效"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#看门狗失效"}},[s._v("#")]),s._v(" 看门狗失效")]),s._v(" "),_("ol",[_("li",[s._v("加锁时指定租赁时间，那么不会启动看门狗。")]),s._v(" "),_("li",[s._v("客户端宕机。")])])])}),[],!1,null,null,null);v.default=e.exports}}]);