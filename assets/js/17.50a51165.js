(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{216:function(t,a,r){"use strict";r.r(a);var e=r(0),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"线程池面试题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程池面试题"}},[t._v("#")]),t._v(" 线程池面试题")]),t._v(" "),r("h3",{attrs:{id:"不同框架中的线程池"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#不同框架中的线程池"}},[t._v("#")]),t._v(" 不同框架中的线程池")]),t._v(" "),r("p",[t._v("  Tomcat的线程池是优先使用核心线程，然后是最大线程，最后是阻塞队列。")]),t._v(" "),r("p",[t._v("  JDK的线程池是优先使用核心线程，然后是阻塞队列，最后是最大线程。"),r("code",[t._v("Executors")]),t._v("下的线程池都是基于"),r("code",[t._v("ThreadPoolExecutor")]),t._v("实现的。")]),t._v(" "),r("h3",{attrs:{id:"线程回收"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程回收"}},[t._v("#")]),t._v(" 线程回收")]),t._v(" "),r("p",[t._v("  （1）线程池中的线程执行任务抛出异常时，该线程被回收。")]),t._v(" "),r("p",[t._v("  （2）线程池中的线程设置了空闲超时时间，达到该时间还没有获取到新任务，该线程被回收。")]),t._v(" "),r("p",[t._v("  假设线程池中核心线程数为4，核心线程池数为8，空闲超时时间为30秒。此时线程池中线程数为8，每隔3秒钟向线程池中提交一个任务，那么所有的线程都不会被回收。因为"),r("strong",[t._v("线程池中的线程会轮询的接收任务")]),t._v("，所有的线程都不会达到空闲超时时间。")])])}),[],!1,null,null,null);a.default=s.exports}}]);