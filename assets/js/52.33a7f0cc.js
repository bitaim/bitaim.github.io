(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{254:function(t,v,_){"use strict";_.r(v);var e=_(0),s=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git命令"}},[t._v("#")]),t._v(" Git命令")]),t._v(" "),_("h4",{attrs:{id:"创建本地仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建本地仓库"}},[t._v("#")]),t._v(" 创建本地仓库")]),t._v(" "),_("p",[t._v("  进入要创建本地仓库的目录，执行"),_("code",[t._v("git init")]),t._v("命令即可。")]),t._v(" "),_("h4",{attrs:{id:"完整的提交流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#完整的提交流程"}},[t._v("#")]),t._v(" 完整的提交流程")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git status")]),t._v("查看本地仓库文件情况。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git add .")]),t._v("将当前目录下的文件添加到暂存区。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git commit -m <提交内容>")]),t._v("将暂存区的文件提交到本地仓库。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git pull")]),t._v("命令拉取远端仓库代码。如果存在冲突，冲突解决后通过"),_("code",[t._v("git add .")]),t._v("和"),_("code",[t._v("git commit -m <提交内容>")]),t._v("命令提交到本地仓库。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git push")]),t._v("命令将本地仓库推送到远端仓库。")]),t._v(" "),_("h4",{attrs:{id:"工作区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#工作区"}},[t._v("#")]),t._v(" 工作区")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git checkout -- <file>")]),t._v("即可恢复工作区的文件到最近的一次Add动作或者最近的一次Commit动作。")]),t._v(" "),_("h4",{attrs:{id:"暂存区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#暂存区"}},[t._v("#")]),t._v(" 暂存区")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git add .")]),t._v("指定当前目录的文件添加到暂存区。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git add [dir]")]),t._v("指定目录下文件添加到暂存区。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git add [file1] [file2]")]),t._v("指定多个文件文件添加到暂存区。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git rm --cached [file1]")]),t._v("移除暂存区的文件。")]),t._v(" "),_("h4",{attrs:{id:"get-reset"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get-reset"}},[t._v("#")]),t._v(" get reset")]),t._v(" "),_("p",[t._v("  这个是用来做"),_("strong",[t._v("代码回退")]),t._v("的命令。代码回退分三个模式，其中"),_("code",[t._v("mixed")]),t._v("是默认模式，下面分别介绍。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git log")]),t._v("命令查看Commit记录，找到要回退的版本号。")]),t._v(" "),_("p",[t._v("  （1）通过"),_("code",[t._v("git reset --soft <版本号>")]),t._v("，撤销Commit动作。")]),t._v(" "),_("p",[t._v("  （2）通过"),_("code",[t._v("git reset --mixed <版本号>")]),t._v("，撤销Commit动作和Add动作。")]),t._v(" "),_("p",[t._v("  （3）通过"),_("code",[t._v("git reset --hard <版本号>")]),t._v("，撤销Commit动作和Add动作，将工作目录的改动也完全恢复。")]),t._v(" "),_("p",[t._v("  如果回退的版本仅仅发生在本地仓库的话，是很简单的。如果"),_("strong",[t._v("回退的某个版本已经提交到远程仓库")]),t._v("，那么就有些特殊了。因为回退到历史某个版本后，本地仓库的版本号小于远程仓库的版本号。")]),t._v(" "),_("p",[t._v("  处理本地代码后，需要"),_("strong",[t._v("强制Push本地仓库到远程仓库")]),t._v("。")]),t._v(" "),_("h4",{attrs:{id:"分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git checkout -b test01 master")]),t._v("，基于 master本地分支 创建 test01本地分支。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git push origin test01")]),t._v("，推送 本地分支test01 到 远程仓库。如果远程仓库没有test01分支，那么会自动创建该分支。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git branch --set-upstream-to=origin/test01 test01")]),t._v("，第一次推送本地分支到远程仓库后，需要将本地test01分支与远程test01分支进行关联，方便后续代码的拉取"),_("code",[t._v("git pull")]),t._v("和推送"),_("code",[t._v("git push")]),t._v("。")]),t._v(" "),_("p",[t._v("  通过"),_("code",[t._v("git branch -d test01")]),t._v("，即可删除本地分支。")])])}),[],!1,null,null,null);v.default=s.exports}}]);