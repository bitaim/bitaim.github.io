(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{327:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[t._v("#")]),t._v(" synchronized")]),t._v(" "),a("p",[a("strong",[t._v("1、synchronized与ReentrantLock的根本区别")]),t._v("?")]),t._v(" "),a("p",[t._v("  synchronized关键字是在JVM层面加锁。而ReentrantLock是在JDK层面加锁。")]),t._v(" "),a("p",[a("strong",[t._v("2、synchronized使用方法")])]),t._v(" "),a("p",[t._v("  多个线程都能要得到某个共享资源，所以就划分了一个区域，操作共享资源的代码就在区域内。要想进入这个区域就必须持有锁，不然就无法进入，这个区域叫做"),a("strong",[t._v("临界区")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修饰普通方法，是对当前类的实例对象加锁")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodOne")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修饰静态方法，是对当前类对象加锁")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodTwo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodThree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修饰代码块时，需要指定加锁对象")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("3、观察字节码文件")])]),t._v(" "),a("p",[t._v("  通过"),a("code",[t._v("javap -v SynchronizedTest.class")]),t._v("指令查看字节码文件。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{\n  public com.bitaim.java.study.lock.syn.SynchronizedTest();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object."<init>":()V\n         4: return\n      LineNumberTable:\n        line 3: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/bitaim/java/study/lock/syn/SynchronizedTest;\n\n  public synchronized void methodOne();\n    descriptor: ()V\n    flags: ACC_PUBLIC, ACC_SYNCHRONIZED\n    Code:\n      stack=0, locals=1, args_size=1\n         0: return\n      LineNumberTable:\n        line 5: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       1     0  this   Lcom/bitaim/java/study/lock/syn/SynchronizedTest;\n\n  public static synchronized void methodTwo();\n    descriptor: ()V\n    flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED\n    Code:\n      stack=0, locals=0, args_size=0\n         0: return\n      LineNumberTable:\n        line 7: 0\n\n  public void methodThree();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=3, args_size=1\n         0: aload_0\n         1: dup\n         2: astore_1\n         3: monitorenter\n         4: aload_1\n         5: monitorexit\n         6: goto          14\n         9: astore_2\n        10: aload_1\n        11: monitorexit\n        12: aload_2\n        13: athrow\n        14: return\n}\n')])])]),a("p",[t._v("  使用"),a("code",[t._v("synchronized")]),t._v("修饰方法时，在字节码文件上可以看到增加了"),a("code",[t._v("ACC_SYNCHRONIZED")]),t._v("访问修饰符。")]),t._v(" "),a("p",[t._v("  使用"),a("code",[t._v("synchronized")]),t._v("修饰代码块时，在字节码文件上可以看到增加了"),a("code",[t._v("monitorenter")]),t._v("、"),a("code",[t._v("monitorexit")]),t._v("两条指令，分别对应着加锁和解锁命令。")]),t._v(" "),a("p",[a("strong",[t._v("4、ACC_SYNCHRONIZED是什么")]),t._v("？")]),t._v(" "),a("p",[a("code",[t._v("ACC_SYNCHRONIZED")]),t._v("会隐式调用"),a("code",[t._v("monitorenter")]),t._v("、"),a("code",[t._v("monitorexit")]),t._v("两条指令，去争夺monitor对象。")]),t._v(" "),a("p",[a("code",[t._v("monitorenter")]),t._v("和"),a("code",[t._v("monitorexit")]),t._v("指令是通过CAS操作来加锁和释放锁的。")]),t._v(" "),a("p",[a("strong",[t._v("5、Monitor对象")])]),t._v(" "),a("p",[t._v("  JVM为每个实例对象和类对象分配了一个Monitor对象。如果要对这个对象加锁，那么必须获取这个对象关联的Monitor对象的lock锁。")]),t._v(" "),a("p",[t._v("  基本原理是Monitor对象中有一个计数器。如果一个线程要想获取Monitor对象的锁，查看计算器是否为0.如果为0，说明当前没有其他线程获取到锁，当前线程可以获取到锁，并将计数器加一。")]),t._v(" "),a("p",[t._v("  并且Monitor中的锁是支持可重入锁的。")]),t._v(" "),a("h2",{attrs:{id:"对象的内存布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的内存布局"}},[t._v("#")]),t._v(" 对象的内存布局")]),t._v(" "),a("p",[t._v("  实例对象被分配在堆内存，也就是主内存（内存条）上，内存上的数据都是通过0、1来存储的。那么CPU是如何知道0、1到底对应着什么类型的数据呢？这要从实例对象在内存中的布局说起。")]),t._v(" "),a("p",[a("strong",[t._v("1、引入相关依赖")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.openjdk.jol"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("jol-core"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("0.10"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[a("strong",[t._v("2、测试类")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectLayout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLayout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toPrintable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("3、输出结果")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("java.lang.Object object internals:\nOFFSET  SIZE   TYPE DESCRIPTION    VALUE\n  0     4      (object header)    05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n  4     4      (object header)    00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n  8     4      (object header)    e5 01 00 f8 (11100101 00000001 00000000 11111000) (-13243)\n  12    4      (loss due to the next object alignment) // 由于对象补齐而丢失的4字节数据\nInstance size: 16 bytes // 实例对象所占大小16字节\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total // 空间损失4字节\n")])])]),a("p",[a("strong",[t._v("4、对象的组成")])]),t._v(" "),a("p",[t._v("  可以看到对象在内存中的布局，包含12字节的"),a("code",[t._v("object header")]),t._v("对象头信息。一个对象在内存中完整的组成包括，对象头、实例数据、数据对齐(padding)。实例数据就是定义在对象中的变量。当实例数据和对象头所占字节之和不足以被8整除时，就需要"),a("strong",[t._v("数据对齐来补充字节")]),t._v("。")]),t._v(" "),a("p",[t._v("  对象头包含两部分。一部分是"),a("code",[t._v("Mark Word")]),t._v("，占8字节。另一部分是"),a("code",[t._v("Klass Pointer")]),t._v("，占4字节。通过"),a("code",[t._v("Klass Pointer")]),t._v("指针，可以确定该段内存数据的类型。如果当前对象是数组对象，那么对象头还会包含"),a("code",[t._v("Array Length")]),t._v("，占4字节。")]),t._v(" "),a("p",[t._v("  在32位JVM系统中，"),a("code",[t._v("Klass Pointer")]),t._v("指针占8字节。而在64位JVM系统中，默认开启了指针压缩，因此"),a("code",[t._v("Klass Pointer")]),t._v("指针占4字节。")]),t._v(" "),a("p",[t._v("  通过"),a("code",[t._v("java -XX:+PrintCommandLineFlags -version")]),t._v("来验证开启指针压缩这一观点。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('-XX:InitialHeapSize=400559936 -XX:MaxHeapSize=6408958976 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC\njava version "1.8.0_161"\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\n')])])]),a("p",[t._v("  其中"),a("code",[t._v("-XX:+UseCompressedClassPointers")]),t._v("代表使用了"),a("strong",[t._v("类指针压缩")]),t._v("。"),a("code",[t._v("-XX:+UseCompressedOops")]),t._v("代表使用了"),a("strong",[t._v("普通对象指针压缩")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("5、看一个完整的对象布局")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// private long userId = 12L; // 基本数据类型long 占8byte")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" userId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 包装类型存储的是对象的指针 占4byte")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLayout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toPrintable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("com.bitaim.study.thread.User object internals:\n OFFSET  SIZE               TYPE DESCRIPTION                               VALUE\n      0     4                    (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                    (object header)                           05 c1 00 f8 (00000101 11000001 00000000 11111000) (-134168315)\n     12     4     java.lang.Long User.userId                               12\n     16     4   java.lang.String User.name                                 (object)\n     20     4                    (loss due to the next object alignment)\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n")])])]),a("p",[t._v("  对象头固定是12字节。由于"),a("code",[t._v("userId")]),t._v("是Long包装引用类型，因此占4字节，"),a("code",[t._v("name")]),t._v("是String引用类型，因此占4字节。对齐数据占4字节。总共24字节。")]),t._v(" "),a("p",[t._v("  如果"),a("code",[t._v("userId")]),t._v("使用long类型，那么占8字节，也就不再需要对齐数据了，对象大小还是24字节。")]),t._v(" "),a("p",[a("strong",[t._v("6、Mark Word")])]),t._v(" "),a("p",[t._v("  Mark Word中记录"),a("strong",[t._v("锁信息")]),t._v("、"),a("strong",[t._v("分代年龄")]),t._v("、"),a("strong",[t._v("hashcode值")]),t._v("。如下图所示。")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190111091608949.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdWR1bl9jb29s,size_16,color_FFFFFF,t_70",width:"550px"}}),t._v(" "),a("p",[t._v("  可以看到分代年龄占4位，这也是晋升老年代的对象的年龄不能超过15的原因。")]),t._v(" "),a("p",[a("strong",[t._v("7、锁升级")])]),t._v(" "),a("p",[t._v("  JDK6对synchronized进行了大幅度的优化，性能也获取了提升。引入了"),a("strong",[t._v("偏向锁")]),t._v("和"),a("strong",[t._v("轻量级锁")]),t._v("的概念，减少了获取锁和释放锁的性能损耗，因为在JDK6之间，synchronized一直是一把重量级锁，每次加锁解锁都需要切换到内核态去争抢互斥量。")]),t._v(" "),a("p",[t._v("  从JDK6开始锁的状态一共有4种，无锁、偏向锁、轻量级锁、重量级锁。"),a("code",[t._v("Mark Word")]),t._v("的最后3位代表着锁的不同状态。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectLayout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLayout")]),t._v(" layout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLayout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无锁")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("layout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toPrintable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加锁")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("layout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toPrintable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解锁")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("layout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toPrintable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("无锁:              00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n轻量级锁（加锁):   00000000 00000000 00000000 00000000 00000011 00101010 11111000 01011000   \n无锁（解锁）：     00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001     \n")])])]),a("p",[t._v("  其中偏向锁是默认开启的，但偏向锁启动需要一些时间。因此在这个案例中，新创建的对象是无锁状态，当有线程加锁时直接升级为轻量级锁，解锁后还原为无锁状态。")]),t._v(" "),a("p",[a("strong",[t._v("偏向锁")])]),t._v(" "),a("p",[t._v("  通过"),a("code",[t._v("-XX:BiasedLockingStartupDelay=0")]),t._v("JVM启动参数来关闭偏向锁启动延迟，使新创建的对象的锁状态是偏向锁状态。再次执行代码，打印结果如下。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("偏向锁：          00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 \n偏向锁（加锁）：  00000000 00000000 00000000 00000000 00000010 11000010 00101000 00000101   \n偏向锁（解锁）：  00000000 00000000 00000000 00000000 00000010 11000010 00101000 00000101     \n")])])]),a("p",[t._v("  偏向锁只适用于单线程的情况。新创建的对象是偏向锁状态，但是其"),a("code",[t._v("Thread Id")]),t._v("为0。当有线程尝试来加锁时，发现"),a("code",[t._v("Thread Id")]),t._v("为0，知道当前没有线程获取了锁，则尝试通过"),a("code",[t._v("CAS")]),t._v("来修改"),a("code",[t._v("Thread Id")]),t._v("，修改成功则代表加锁成功。解锁时，"),a("code",[t._v("Thread Id")]),t._v("并没有被清空。当同一个线程来加锁时，无需CAS修改直接比较即可。"),a("code",[t._v("Thread Id")]),t._v("在"),a("code",[t._v("Mark Word")]),t._v("中用54bit来记录。")]),t._v(" "),a("p",[t._v("  偏向锁代表有很大概念的情况下只有一个线程来加锁，而锁消除是只有一个线程来加锁。")]),t._v(" "),a("p",[t._v("  创建的对象，"),a("code",[t._v("MarkWord")]),t._v("中的锁记录要么是无锁，要么是偏向锁。要么是"),a("code",[t._v("无锁--CAS--\x3e轻量级锁")]),t._v("，要么是"),a("code",[t._v("偏向锁--CAS--\x3e偏向锁--CAS--\x3e轻量级锁")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("轻量级锁")])]),t._v(" "),a("p",[t._v("  当有其他线程来加锁时，发现"),a("code",[t._v("Thread Id")]),t._v("已经存在，则偏向锁直接升级为轻量级锁。")]),t._v(" "),a("p",[t._v("  加锁的线程在栈中创建"),a("code",[t._v("Lock Record")]),t._v("对象，存储锁的对象头中的"),a("code",[t._v("Mark Word")]),t._v("信息。锁的对象头中不在存储这些信息，而是存储一个"),a("code",[t._v("Lock Record")]),t._v("指针，指向加锁的线程。线程通过CAS修改"),a("code",[t._v("Mark Word")]),t._v("中的"),a("code",[t._v("Lock Record")]),t._v("指针到当前线程栈，修改成功则代表加锁成功，加锁失败的线程将尝试自旋（自旋消耗CPU的），自旋失败后膨胀为重量级锁。")]),t._v(" "),a("p",[t._v("  当调用hashcode方法时，会将hashcode值记录到"),a("code",[t._v("Mark Word")]),t._v("中。hashcode()方法会"),a("strong",[t._v("导致对象直接撤销偏向锁，升级为轻量级锁")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("重量级锁")])]),t._v(" "),a("p",[t._v("  当成为重量级锁时，就会创建一个"),a("code",[t._v("ObjectMonitor")]),t._v("对象，该对象是通过C++实现的。锁的对象头中"),a("code",[t._v("Mark Word")]),t._v("就会指向该监视器锁对象。")]),t._v(" "),a("p",[a("code",[t._v("ObjectMonitor")]),t._v("对象其中有三个重要的变量。第一个是"),a("code",[t._v("_owner")]),t._v("指针，指向当前持有锁的线。第二个是"),a("code",[t._v("_count")]),t._v("计数器，代表加锁次数。第三个是"),a("code",[t._v("_entrylist")]),t._v("队列，需要加锁的线程会先进入这个队列等待获取机会尝试加锁，进入队列等待的线程是不消耗CPU的。第四个是"),a("code",[t._v("_waitset")]),t._v("队列，持有锁的线程调用"),a("code",[t._v("wait")]),t._v("方法时，该线程就会进入该队列，释放锁，然后等待被唤醒。")]),t._v(" "),a("p",[a("code",[t._v("_entrylist")]),t._v("队列中的线程竞争加锁，加锁成功的线程将"),a("code",[t._v("_owner")]),t._v("指针指向自己，并将"),a("code",[t._v("_count")]),t._v("计数器加一。加锁失败的线程就会被阻塞住。")]),t._v(" "),a("p",[t._v("  竞争加锁依赖于底层操作系统的"),a("code",[t._v("Mutex Lock")]),t._v("互斥量来加锁的，涉及到用户态与内核态的切换，成本非常高。")]),t._v(" "),a("h4",{attrs:{id:"锁消除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁消除"}},[t._v("#")]),t._v(" 锁消除")]),t._v(" "),a("p",[t._v("  锁消除是JIT编译器对"),a("code",[t._v("synchronized")]),t._v("做的优化。在编译时，JIT会通过内存逃逸技术，如果确定"),a("code",[t._v("synchronized")]),t._v("锁对象只会被一个线程加锁，那么在编译时就不会加入"),a("code",[t._v("monitorenter")]),t._v("和"),a("code",[t._v("monitorexit")]),t._v("指令了。")]),t._v(" "),a("h4",{attrs:{id:"锁粗化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁粗化"}},[t._v("#")]),t._v(" 锁粗化")]),t._v(" "),a("p",[t._v("  JIT编译器如果发现有代码持续多次加锁和释放锁，会合并成一个锁，就是锁粗化。避免多次加锁和释放锁。")]),t._v(" "),a("h4",{attrs:{id:"适应性锁（自旋锁）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适应性锁（自旋锁）"}},[t._v("#")]),t._v(" 适应性锁（自旋锁）")]),t._v(" "),a("p",[t._v("  轻量级加锁失败时，也有一个自旋锁的概念，自适应是底层自动调节的，到底采用不采用自旋锁，自旋多少次。如果线程持有锁的时间很短，其他加锁失败的线程会被阻塞，那么就会发生上下文切换。线程很快就释放锁了，又会唤醒阻塞的线程，这样频繁的线程上下文切换会很消耗性能的。")]),t._v(" "),a("p",[t._v("  对于这种持有锁时间很短的情况，是可以采取忙等的策略的。也就是一个线程没有竞争到锁，进入一个while循环等待，不会暂停发生线程上下文切换，找机会再次加锁。这样可以大幅度减少线程上下文的切换，而这种自旋等待获取锁的方式，就是所谓的自旋锁，不断地自旋尝试加锁。")]),t._v(" "),a("p",[a("code",[t._v("synchronized")]),t._v("涉及到JVM底层的知识。比如栈帧、LockRecord等是相当复杂的。")]),t._v(" "),a("h2",{attrs:{id:"jdk6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk6"}},[t._v("#")]),t._v(" JDK6")]),t._v(" "),a("p",[t._v("  在JDK6（不包含6）之前，synchronized只是重量级锁。因为会有线程的阻塞和唤醒，这个操作是借助操作系统的系统调用来实现的，常见的Linux下就是利用 pthread 的 mutex 来实现的。")]),t._v(" "),a("p",[t._v("  而涉及到系统调用就会有上下文的切换，即内核态与用户态的切换，这种切换的开销还是挺大的。所以称为重量级锁。")]),t._v(" "),a("h2",{attrs:{id:"monitorenter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monitorenter"}},[t._v("#")]),t._v(" monitorenter")]),t._v(" "),a("p",[t._v("  执行"),a("code",[t._v("monitorenter")]),t._v("方法时，首先会判断是否开启了偏向锁，开启了走快速逻辑（"),a("code",[t._v("fast_enter")]),t._v("），没开启走慢速逻辑（"),a("code",[t._v("slow_enter")]),t._v("）。")]),t._v(" "),a("p",[t._v("  慢速逻辑，首先通过 CAS 把 ObjectMonitor 中的 _owner 设置为当前线程，设置成功就表示获取锁成功。然后通过 recursions 的自增来表示重入。")]),t._v(" "),a("h4",{attrs:{id:"原子性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[t._v("#")]),t._v(" 原子性")]),t._v(" "),a("p",[t._v("  通过加锁和解锁，保证同一时间只有一个线程可以对一段代码进行操作。")]),t._v(" "),a("h4",{attrs:{id:"可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可见性"}},[t._v("#")]),t._v(" 可见性")]),t._v(" "),a("p",[t._v("  内存屏障可以分为"),a("code",[t._v("Load屏障")]),t._v("和"),a("code",[t._v("Store屏障")]),t._v("。")]),t._v(" "),a("p",[t._v("  在"),a("code",[t._v("monitorenter")]),t._v("指令之后会被施加一个"),a("code",[t._v("Load屏障")]),t._v("，代码块中某些值如果被其他处理器修改了，那么就要从其他处理器的高速缓存（或者主内存）里加载到自己的高速缓存里来，确保看到的是最新的数据，这个过程叫做"),a("code",[t._v("refresh")]),t._v("操作。")]),t._v(" "),a("p",[t._v("  在"),a("code",[t._v("monitorexit")]),t._v("指令之后会被施加一个"),a("code",[t._v("Store屏障")]),t._v("，代码块中被处理器执行的写操作全部刷新到高速缓存（或者主内存）里去，这个过程叫做"),a("code",[t._v("flush")]),t._v("操作。")]),t._v(" "),a("h4",{attrs:{id:"有序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有序性"}},[t._v("#")]),t._v(" 有序性")]),t._v(" "),a("p",[t._v("  按照有序性来划分的话，还可以分为"),a("code",[t._v("Acquire屏障")]),t._v("和"),a("code",[t._v("Release屏障")]),t._v("。")]),t._v(" "),a("p",[t._v("  在"),a("code",[t._v("monitorenter")]),t._v("指令之后，"),a("code",[t._v("Load屏障")]),t._v("之后，会加一个"),a("code",[t._v("Acquire屏障")]),t._v("，作用是禁止代码块中的读操作与代码块上外部的读写操作之间发生指令重排序。")]),t._v(" "),a("p",[t._v("  在"),a("code",[t._v("monitorexit")]),t._v("指令之后，"),a("code",[t._v("Store屏障")]),t._v("之后，会加一个"),a("code",[t._v("Release屏障")]),t._v("，作用是禁止代码块中的写操作与代码块下外部的读写操作之间发生指令重排序。")]),t._v(" "),a("p",[t._v("  通过"),a("code",[t._v("Acquire屏障")]),t._v("和"),a("code",[t._v("Release屏障")]),t._v("就可以让synchronized保证有序性，只有synchronized内部的指令可以重排序，但是绝对不会与外部的指令发生重排序。")]),t._v(" "),a("p",[t._v("  不要对内存屏障太较真了，没有一个官方权威的说法。了解一下吧。"),a("code",[t._v("Load屏障")]),t._v("、"),a("code",[t._v("Store屏障")]),t._v("还好理解，对于"),a("code",[t._v("Acquire屏障")]),t._v("、"),a("code",[t._v("Release屏障")]),t._v("就不太明白了。")])])}),[],!1,null,null,null);s.default=e.exports}}]);