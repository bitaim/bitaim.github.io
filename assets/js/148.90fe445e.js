(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{346:function(n,t,s){"use strict";s.r(t);var a=s(0),e=Object(a.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[this._v("#")]),this._v(" 事务")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("{\n  插入A\n  插入B\n    {\n      插入C\n      插入D\n    }\n  插入E\n  插入F\n\n}\n\n\nNEW：主事务不会影响子事务。因为是两个事务。\n\n执行到B报错，主事务回滚，子事务未执行。该条件，主事务未影响子事务。\n执行到D报错，子事务报错回滚，此时要看子事务的异常是否被抛出去，如果抛出去则主事务被回滚，如果没有抛出去则不影响主事务继续执行。\n执行到F报错，主事务回滚，子事务已提交，子事务并不会回滚。该条件，主事务未影响子事务。\n\nNESTED：主事务影响子事务。因为是同一事务。\n\n执行到B报错，主事务回滚，子事务未执行。该条件，主事务未影响子事务。\n执行到D报错，子事务报错回滚，此时要看子事务的异常是否被抛出去，如果抛出去则主事务被回滚，如果没有抛出去则不影响主事务继续执行。\n执行到F报错，主事务回滚，子事务同样被回滚。\n\n可以看到差距在主事务的后续是否对子事务造成影响。\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);