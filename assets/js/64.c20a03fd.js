(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{264:function(e,v,_){"use strict";_.r(v);var s=_(0),o=Object(s.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"linux常用软件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#linux常用软件"}},[e._v("#")]),e._v(" Linux常用软件")]),e._v(" "),_("h2",{attrs:{id:"jdk8安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk8安装"}},[e._v("#")]),e._v(" JDK8安装")]),e._v(" "),_("p",[e._v("  1、下载JDK安装包并上传到服务器，指令"),_("code",[e._v("tar -zxvf jdk-8u251-linux-x64.tar.gz")]),e._v("解压缩，将解压后的目录移动到"),_("code",[e._v("/usr/local")]),e._v("目录下。")]),e._v(" "),_("p",[e._v("  2、指令"),_("code",[e._v("vi /etc/profile")]),e._v("，修改环境变量，在末尾添加即可，配置如下。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("export JAVA_HOME=/usr/local/jdk1.8.0_251\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n")])])]),_("p",[e._v("  3、指令"),_("code",[e._v("source /etc/profile")]),e._v("，刷新配置文件使其立即生效。")]),e._v(" "),_("p",[e._v("  4、确认Java环境是否安装成功，指令"),_("code",[e._v("java -version")]),e._v("，显示版本号即可。")]),e._v(" "),_("h2",{attrs:{id:"redis安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis安装"}},[e._v("#")]),e._v(" Redis安装")]),e._v(" "),_("p",[e._v("  1、下载Redis安装包并上传到服务器，指令"),_("code",[e._v("tar -zxvf redis-5.0.8.tar.gz")]),e._v("解压缩。")]),e._v(" "),_("p",[e._v("  2、Redis编译需要安装gcc环境，指令"),_("code",[e._v("yum install -y gcc")]),e._v("。")]),e._v(" "),_("p",[e._v("  3、指令"),_("code",[e._v("cd /usr/local/redis-5.0.8")]),e._v("进入解压后目录，指令"),_("code",[e._v("make")]),e._v("进行编译。如果抛出"),_("code",[e._v("zmalloc.h:50:31: 致命错误：jemalloc/jemalloc.h：没有那个文件或目录")]),e._v("错误，执行指令"),_("code",[e._v("make MALLOC=libc")]),e._v("，再次执行指令"),_("code",[e._v("make")]),e._v("进行编译。")]),e._v(" "),_("p",[e._v("  4、指令"),_("code",[e._v("cd src")]),e._v("切换目录，执行指令"),_("code",[e._v("make install PREFIX=/usr/local/redis")]),e._v("安装命令即可。")]),e._v(" "),_("p",[_("strong",[e._v("1、常用配置")])]),e._v(" "),_("p",[e._v("  复制解压后的目录中的redis.conf到"),_("code",[e._v("/usr/local/redis")]),e._v("目录下，然后修改redis.conf配置文件。")]),e._v(" "),_("p",[e._v("  1、后台运行模式，"),_("code",[e._v("daemonize yes")]),e._v("。")]),e._v(" "),_("p",[e._v("  2、允许远程访问。关闭保护模式"),_("code",[e._v("protected-mode no")]),e._v("，将"),_("code",[e._v("bind 127.0.0.1")]),e._v("注释。")]),e._v(" "),_("p",[e._v("  3、添加密码，"),_("code",[e._v("requirepass <密码>")]),e._v("。")]),e._v(" "),_("p",[_("strong",[e._v("2、常用命令")])]),e._v(" "),_("p",[e._v("  1、启动Redis，指令"),_("code",[e._v("cd /usr/local/redis")]),e._v("切换目录，指令"),_("code",[e._v("bin/redis-server redis.conf")]),e._v("即可启动成功。")]),e._v(" "),_("p",[e._v("  2、关闭Redis，指令"),_("code",[e._v("cd /usr/local/redis")]),e._v("切换目录，指令"),_("code",[e._v("bin/redis-cli shutdown")]),e._v("即可关闭Redis。")]),e._v(" "),_("h2",{attrs:{id:"nginx安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#nginx安装"}},[e._v("#")]),e._v(" Nginx安装")]),e._v(" "),_("p",[e._v("  1、下载Nginx安装包，地址为"),_("code",[e._v("http://nginx.org/en/download.html")]),e._v("，并上传到服务器，指令"),_("code",[e._v("tar -zxvf nginx-1.18.0.tar.gz")]),e._v("解压缩。")]),e._v(" "),_("p",[e._v("  2、安装依赖环境，"),_("code",[e._v("yum -y install gcc pcre-devel zlib-devel openssl openssl-devel")]),e._v("。")]),e._v(" "),_("p",[e._v("  3、切换目录"),_("code",[e._v("cd nginx-1.18.0")]),e._v("，编译"),_("code",[e._v("./configure --prefix=/usr/local/nginx")]),e._v("，安装"),_("code",[e._v("make && make install")]),e._v("。")]),e._v(" "),_("p",[_("strong",[e._v("1、常用命令")])]),e._v(" "),_("p",[e._v("  1、启动Nginx，指令"),_("code",[e._v("cd /usr/local/nginx")]),e._v("切换目录，指令"),_("code",[e._v("sbin/nginx")]),e._v("即可启动成功。")]),e._v(" "),_("p",[e._v("  2、重启Nginx，指令"),_("code",[e._v("cd /usr/local/nginx")]),e._v("切换目录，指令"),_("code",[e._v("sbin/nginx -s reload")]),e._v("即可重启成功。")]),e._v(" "),_("p",[e._v("  3、快速停止Nginx，指令"),_("code",[e._v("cd /usr/local/nginx")]),e._v("切换目录，指令"),_("code",[e._v("sbin/nginx -s stop")]),e._v("即可停止成功。")]),e._v(" "),_("p",[e._v("  4、优雅停止Nginx，指令"),_("code",[e._v("cd /usr/local/nginx")]),e._v("切换目录，指令"),_("code",[e._v("sbin/nginx -s quit")]),e._v("即可停止成功。")]),e._v(" "),_("p",[e._v("  5、重建日志文件，指令"),_("code",[e._v("cd /usr/local/nginx")]),e._v("切换目录，指令"),_("code",[e._v("sbin/nginx -s reopen")]),e._v("即可停止成功。")]),e._v(" "),_("p",[_("strong",[e._v("2、"),_("a",{attrs:{href:"../命令/05_Nginx.html",target:"_blank"}},[e._v("负载均衡")])])]),e._v(" "),_("p",[_("strong",[e._v("3、openresty")])]),e._v(" "),_("p",[e._v("  使用Openresty代替Nginx，Openresty中整合了相关lua脚本，有利于nginx开发工作者开发。")]),e._v(" "),_("ul",[_("li",[e._v("从 http://openresty.org/en/ 左侧的download中下载相关tar.gz的linux安装包")]),e._v(" "),_("li",[e._v("上传到linux服务器后，解压 tar -zxvf openresty-1.13.6.2.tar.gz")]),e._v(" "),_("li",[e._v("cd openresty-1.13.6.2，进入目录后，安装相关依赖 yum -y install pcre-devel openssl-devel gcc curl")]),e._v(" "),_("li",[e._v("./configure 编译，然后 make&&make install 安装")]),e._v(" "),_("li",[e._v("进入目录 cd /usr/local/openresty/nginx")]),e._v(" "),_("li",[e._v("启动：sbin/nginx -c conf/nginx.conf")]),e._v(" "),_("li",[e._v("无缝重启：修改配置后直接 sbin/nginx -s reload")])]),e._v(" "),_("h2",{attrs:{id:"mysql安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql安装"}},[e._v("#")]),e._v(" MySQL安装")]),e._v(" "),_("p",[e._v("  1、下载MySQL安装包并上传到服务器，指令"),_("code",[e._v("tar -zxvf mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz")]),e._v("解压缩。")]),e._v(" "),_("p",[e._v("  2、修改解压后的文件名"),_("code",[e._v("mv mysql-5.7.30-linux-glibc2.12-x86_64 mysql5.7.30")]),e._v("。")]),e._v(" "),_("p",[e._v("  3、修改配置"),_("code",[e._v("vi /etc/my.cnf")]),e._v("，配置如下。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("[client]\nport=3306\nsocket=/tmp/mysql5.7.30/mysql.sock\n[mysqld]\nport=3306\nuser=mysql\ncharacter_set_server=utf8mb4\ncollation-server=utf8mb4_general_ci\nsocket=/tmp/mysql5.7.30/mysql.sock\nbasedir=/usr/local/mysql5.7.30\ndatadir=/usr/local/mysql5.7.30/data\nsymbolic-links=0\n\nskip-grant-tables\n[mysqld_safe]\nlog-error=/var/log/mysql5.7.30/mysql.log\npid-file=/var/run/mysql5.7.30/mysql.pid\n\n!includedir /etc/my.cnf.d\n")])])]),_("p",[e._v("  4、创建用户"),_("code",[e._v("useradd -m mysql")]),e._v("，创建组"),_("code",[e._v("groupadd mysql")]),e._v("。")]),e._v(" "),_("p",[e._v("  5、将新建的与mysql相关的文件夹的权限全部修改，"),_("code",[e._v("chown -R mysql:mysql mysql5.7.30")]),e._v("。")]),e._v(" "),_("p",[e._v("  6、初始化数据库"),_("code",[e._v("/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql5.7.30 --datadir=/usr/local/mysql5.7.30/data")]),e._v("，将临时密码复制到某处保存。")]),e._v(" "),_("p",[e._v("  7、第一次启动mysql时需要初始化配置，需要切换用户"),_("code",[e._v("su mysql")]),e._v("，指令"),_("code",[e._v("/usr/local/mysql5.7.30/support-files/mysql.server start")]),e._v("即可启动mysql，"),_("code",[e._v("mysql.server stop")]),e._v("即可停止mysql。切换回root用户也可以正常启动关闭mysql。")]),e._v(" "),_("p",[e._v("  8、修改环境变量。指令"),_("code",[e._v("vi /etc/profile")]),e._v("，在末尾加入"),_("code",[e._v("export PATH=$PATH:/usr/local/mysql5.7.30/bin:/usr/local/mysql/lib")]),e._v("，指令"),_("code",[e._v("source /etc/profile")]),e._v("使配置生效。")]),e._v(" "),_("p",[e._v("  9、修改密码。指令"),_("code",[e._v("vi /etc/my.cnf")]),e._v("修改配置，将"),_("code",[e._v("skip-grant-tables")]),e._v("注释。root用户重新启动mysql。指令"),_("code",[e._v("mysql -uroot -p")]),e._v("登录mysql，输入临时密码，登录成功后。指令"),_("code",[e._v("set password='123456';")]),e._v("即可修改密码。")]),e._v(" "),_("p",[_("strong",[e._v("1、开放远程访问")])]),e._v(" "),_("p",[e._v("  数据库安装成功后，通过navicat并不能直接远程连接，会抛出"),_("code",[e._v("1130错误，is not allowed to connect to this server")]),e._v("。")]),e._v(" "),_("p",[e._v("  1、首先在安装mysql的服务器执行"),_("code",[e._v("mysql -uroot -p")]),e._v("登录，选择数据库"),_("code",[e._v("use mysql;")]),e._v("，执行"),_("code",[e._v("select host from user where user = 'root';")]),e._v("，可以看到host的值为"),_("code",[e._v("localhost")]),e._v("，也就是只允许本机访问。")]),e._v(" "),_("p",[e._v("  2、指令"),_("code",[e._v("update user set host = '%' where user ='root';")]),e._v("，Host设置了“%”后便可以允许远程访问。")]),e._v(" "),_("p",[e._v("  3、"),_("code",[e._v("flush privileges;")]),e._v("，刷新权限使配置生效即可连接。")]),e._v(" "),_("p",[_("strong",[e._v("2、MySQL环境变量")])]),e._v(" "),_("p",[e._v("  配置好环境就可以在任意目录，使用"),_("code",[e._v("mysql -uroot -p")]),e._v("登录命令了。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("MYSQL_HOME=/usr/local/mysql5.7.30\nPATH=$PATH:$MYSQL_HOME/bin\nexport MYSQL_HOME PATH\n")])])]),_("p",[_("strong",[e._v("3、开启binlog")])]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("server_id=100\nlog-bin=/usr/local/mysql5.7.30/binlog/mysql-bin\nbinlog-format=Row\n")])])]),_("p",[_("strong",[e._v("4、常见错误")])]),e._v(" "),_("p",[e._v("  有一次为了开启binlog，再登录时出现这个错误，"),_("code",[e._v("MySQL... ERROR! The server quit without updating PID file")]),e._v("。百度许久，未找到解决方案。最关键的还是要去看日志，"),_("code",[e._v("mysqld: File '/usr/local/mysql5.7.30/binlog/mysql-bin.index' not found (Errcode: 13 - Permission denied)")]),e._v("结果是目录没有权限。这个目录是为了存储binlog而新创建的，突然想到了mysql的文件权限都应该是mysql，所以调整目录权限"),_("code",[e._v("chown mysql:mysql binlog")]),e._v("。")]),e._v(" "),_("h2",{attrs:{id:"docker安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[e._v("#")]),e._v(" Docker安装")]),e._v(" "),_("p",[e._v("  0、Docker CE支持64位Centos7系统，并且内核版本不低于3.10。可通过"),_("code",[e._v("uname -a")]),e._v("查看内核版本。")]),e._v(" "),_("p",[e._v("  1、创建docker用户组"),_("code",[e._v("sudo groupadd docker")]),e._v("，将当前用户加入docker组"),_("code",[e._v("sodu usermod -aG docker $USER")]),e._v("。默认情况下，Docker命令会使用Unix socket与Docker引擎通讯。而只有Root用户和docker组的用户才可以访问docker引擎的Unix socket。一般Linux系统上不会直接使用root用户进行操作，因此需要将使用docker的用户加入docker用户组。")]),e._v(" "),_("p",[e._v("  2、指令"),_("code",[e._v("systemctl disabled firewalld")]),e._v("禁用防火墙，通过"),_("code",[e._v("systemctl stop firewalld")]),e._v("关闭防火墙。")]),e._v(" "),_("p",[e._v("  3、指令"),_("code",[e._v("yum remove docker docker-common docker-selinux docker-image")]),e._v("卸载旧版本。")]),e._v(" "),_("p",[e._v("  4、指令"),_("code",[e._v("yum install -y yum-utils device-mapper-persistent-data lvm2")]),e._v("安装依赖。")]),e._v(" "),_("p",[e._v("  5、指令"),_("code",[e._v("yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo")]),e._v("增加docker下载源。")]),e._v(" "),_("p",[e._v("  6、指令"),_("code",[e._v("yum install docker-ce")]),e._v("安装docker。")]),e._v(" "),_("h3",{attrs:{id:"卸载docker"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#卸载docker"}},[e._v("#")]),e._v(" 卸载Docker")]),e._v(" "),_("p",[e._v("  1、指令"),_("code",[e._v("yum remove docker-ce")]),e._v("卸载docker。")]),e._v(" "),_("p",[e._v("  2、上面的指令仅仅卸载了Docker进程，但镜像还存在，使用指令"),_("code",[e._v("rm -rf /var/lib/docker")]),e._v("即可删除。")]),e._v(" "),_("h3",{attrs:{id:"配置镜像加速"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置镜像加速"}},[e._v("#")]),e._v(" 配置镜像加速")]),e._v(" "),_("p",[e._v("  1、入阿里云官网，搜索容器镜像服务，找到镜像加速器，复制属于自己的加速地址。")]),e._v(" "),_("p",[e._v("  2、指令"),_("code",[e._v("cd /etc/docker")]),e._v("切换目录，指令"),_("code",[e._v("vi daemon.json")]),e._v("编辑文件，没有就新建，并加入以下内容。")]),e._v(" "),_("div",{staticClass:"language-json extra-class"},[_("pre",{pre:!0,attrs:{class:"language-json"}},[_("code",[_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),_("span",{pre:!0,attrs:{class:"token property"}},[e._v('"registry-mirrors"')]),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),_("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://aqrlrx4a.mirror.aliyuncs.com"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" \n")])])]),_("p",[e._v("  3、重新加载配置"),_("code",[e._v("systemctl daemon-reload")]),e._v("。设置开机自启动"),_("code",[e._v("systemctl enable docker")]),e._v("。")]),e._v(" "),_("h3",{attrs:{id:"docker指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker指令"}},[e._v("#")]),e._v(" "),_("a",{attrs:{href:"./03_Docker.html",target:"_blank"}},[e._v("Docker指令")])]),e._v(" "),_("h2",{attrs:{id:"docker-compose安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose安装"}},[e._v("#")]),e._v(" Docker-compose安装")]),e._v(" "),_("p",[e._v("  1、指令"),_("code",[e._v('wget -O /usr/local/bin/docker-compose "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)"')]),e._v("下载。如果提示没有wget，指令"),_("code",[e._v("yum install -y wget")]),e._v("安装即可。")]),e._v(" "),_("p",[e._v("  2、指令"),_("code",[e._v("cd /usr/local/bin")]),e._v("切换目录，指令"),_("code",[e._v("mv docker-compose-Linux-x86_64 docker-compose")]),e._v("修改名称。")]),e._v(" "),_("p",[e._v("  3、指令"),_("code",[e._v("chmod +x docker-compose")]),e._v("赋予可执行权限。")]),e._v(" "),_("p",[e._v("  4、指令"),_("code",[e._v("docker-compose version")]),e._v("看到版本号，即安装成功。")])])}),[],!1,null,null,null);v.default=o.exports}}]);