(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{487:function(v,_,t){"use strict";t.r(_);var T=t(14),e=Object(T.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"https协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#https协议"}},[v._v("#")]),v._v(" HTTPS协议")]),v._v(" "),t("p",[v._v("  HTTP协议的致命缺陷是"),t("strong",[v._v("明文传输")]),v._v("的，没有经过任何加密。当这些明文数据经过Wifi、路由器、运营商、机房等多个物理设备节点，可能会被任意节点监听到，传输的内容就会被完全暴露，这一攻击手机叫做"),t("strong",[v._v("中间人")]),v._v("攻击。另外不要随意连接默认Wifi，以免暴露信息。")]),v._v(" "),t("p",[v._v("  为了解决HTTP明文传输数据可能导致的安全问题，提出了HTTPS（HyperText Transfer Protocol Secure）超文本传输安全协议，数据通信仍然是HTTP，但利用SSL/TLS加密数据包。"),t("strong",[v._v("HTTPS其实就是将HTTP的数据包通过SSL/TLS加密后传输")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("  SSL（Secure Sockets Layer）安全套阶层")]),v._v("和TLS（Transport Layer Security）传输层安全协议其实是一套东西。")]),v._v(" "),t("p",[v._v("  HTTPS 的出发点是解决HTTP明文传输时信息被篡改和监听的问题。1、为了兼顾性能和安全性，使用了"),t("strong",[v._v("非对称加密 + 对称加密")]),v._v("的方案。2、为了保证公钥传输中不被篡改，又使用了非对称加密的"),t("strong",[v._v("数字签名")]),v._v("功能，借助"),t("strong",[v._v("CA机构和系统根证书")]),v._v("的机制保证了HTTPS证书的公信力。")]),v._v(" "),t("p",[v._v("  HTTPS的加解密流程如下：https://mp.weixin.qq.com/s/21JaXwdfSjItj5SgOwhapg")]),v._v(" "),t("img",{attrs:{src:"/网络/HTTPS通信.jpg"}}),v._v(" "),t("ul",[t("li",[v._v("1、用户在浏览器发起HTTPS请求，比如"),t("code",[v._v("https://www.baidu.com")]),v._v("，默认使用服务端的443端口。")]),v._v(" "),t("li",[v._v("2、服务端需要使用一套CA数字证书，证书内会附带一个公钥Pub，一个私钥Private，私钥保留在服务端不公开。")]),v._v(" "),t("li",[v._v("3、服务端收到用户请求后，将配置好的包含公钥Pub的证书发送给客户端。")]),v._v(" "),t("li",[v._v("4、客户端收到证书，校验合法性，主要包括有效期、证书的域名与请求域名是否一致，上一级证书是否有效，如果不通过，则显示HTTPS警告信息，通过则继续。")]),v._v(" "),t("li",[v._v("5、客户端生成一个用户对称加密的随机Key，并用证书内的公钥Pub进行加密，发送给服务端。")]),v._v(" "),t("li",[v._v("6、服务端收到随机Key的密文，使用与公钥Pub配对的私钥Private进行解密，得到客户端真正想发送的随机Key。")]),v._v(" "),t("li",[v._v("7、服务端使用客户端发送过来的随机Key对要传输的HTTP数据进行对称加密，将密文返回给客户端。")]),v._v(" "),t("li",[v._v("8、客户端使用随机Key对称解密密文，得到HTTP数据明文。")]),v._v(" "),t("li",[v._v("9、后续HTTPS请求使用之前交换好的随机Key进行对称加解密。")])]),v._v(" "),t("p",[v._v("  CA颁发机构，依然考虑中间人攻击问题，非对称加密的算法是公开的，所有人都可以自己生成一对公钥私钥。")]),v._v(" "),t("p",[v._v("  当服务端向客户端返回公钥A1的时候，中间人将其替换成自己的公钥B1传送给浏览器。而浏览器一无所知，傻乎乎的用公钥B1加密了密钥Key发送出去，又被中间人拦截，中间人利用自己的私钥B2解密，得到密钥Key，再使用服务端的公钥A1加密传送给服务端，完成了通信链路，而服务端和客户端毫无感知。")]),v._v(" "),t("p",[v._v("  核心问题是客户端无法确认收到的公钥是不是真的服务端发来的。为了解决这一问题，互联网引入了一个公信机构CA。")]),v._v(" "),t("p",[v._v("  服务端在使用HTTPS之前，去经过认证的CA机构申请颁发一份数字证书，数字证书里包含证书持有者、证书有效期、公钥等信息，服务端将证书发送给客户端，客户端校验证书身份和要访问的网站身份确认一致后再进行后续的加密操作。")]),v._v(" "),t("p",[v._v("  如果中间人聪明一点，只改动了证书中的公钥部分，客户端依然不能确认证书是否被篡改，这就需要一些防伪技术了。")]),v._v(" "),t("p",[v._v("  非对称加密中一般公钥用来加密，私钥用来解密，私钥加密理论上可行，但由于数学上的设计这么做并不合适，私钥除了解密外的真正用户其实还有一个，就是"),t("strong",[v._v("数字签名")]),v._v("，是一种防伪技术，只有有人篡改了证书，那么数字签名必然校验失败。过程如下，1、CA机构拥有自己的一对公钥和私钥，2、CA机构在颁发证书时对证书明文信息进行哈希，3、将哈希值用私钥进行夹签，得到数字签名。明文数据和数字签名组成证书，传递给客户端。客户端得到证书，分解明文部分Text和数字签名Sig1，用CA机构的公钥进行解密，得到Sig2（由于CA机构是一种公信身份，因为在系统或浏览器中会内置CA机构的证书和公钥信息），用证书里声明的哈希算法对明文Text部分进行哈希得到H，当自己计算得到的哈希值T与解密后的Sig2相等，表示证书可信，没有被篡改。")]),v._v(" "),t("p",[v._v("  签名是由CA机构的私钥生成的，中间人篡改信息后无法拿到CA机构的私钥，保证了证书可信。在这个过程中，系统或浏览器中内置的CA机构的证书和公钥成为了至关重要的环节，这也是CA机构公信身份的证明，如果系统或浏览器中没有这个CA机构，那么客户端可以不接受服务端传回的证书，显示HTTPS警告。")]),v._v(" "),t("p",[v._v("  实际上CA机构的证书是一条信任链，A信任B，B信任C，以掘金的证书为例，掘金向RapidSSL申请一张证书，而RapidSSL的CA身份是由DigiCert Global根CA认证的，构成了一条信任链。各级CA机构的私钥是绝对的私密信息，一旦CA机构的私钥泄露，其公信力就会一败涂地。之前就有过几次CA机构私钥泄露，引发信任危机，各大系统和浏览器只能纷纷吊销内置的对应CA的根证书。")])])}),[],!1,null,null,null);_.default=e.exports}}]);